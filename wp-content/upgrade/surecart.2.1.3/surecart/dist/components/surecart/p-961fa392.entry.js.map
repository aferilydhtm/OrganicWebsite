{"version":3,"names":["scSubscriptionDetailsCss","wp","i18n","__","sprintf","h","date","this","subscription","current_period_end_at","month","day","year","type","currency","_g","pendingPrice","_j","_h","price","value","_l","_k","pending_update","ad_hoc_amount","intervalString","_m","product","name","_q","trial_end_at","_u","alignItems","justifyContent","style","renderName","renderActivations","hideRenewalText","renderRenewalText","label","onScRequestClose","activationsModal","open","getActivations","map","activation","scSubscriptionStatusBadgeCss"],"sources":["./src/components/controllers/dashboard/subscription-details/sc-subscription-details.css?tag=sc-subscription-details&encapsulation=shadow","./src/components/controllers/dashboard/subscription-details/sc-subscription-details.tsx","./src/components/ui/subscription-status-badge/sc-subscription-status-badge.css?tag=sc-subscription-status-badge&encapsulation=shadow","./src/components/ui/subscription-status-badge/sc-subscription-status-badge.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.subscription-details {\n  display: grid;\n  gap: 0.25em;\n  color: var(--sc-input-label-color);\n}\n","import { Component, h, Prop, State, Watch } from '@stencil/core';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { addQueryArgs } from '@wordpress/url';\n\nimport apiFetch from '../../../../functions/fetch';\nimport { intervalString } from '../../../../functions/price';\nimport { License, Price, Product, Purchase, Subscription } from '../../../../types';\n\n@Component({\n  tag: 'sc-subscription-details',\n  styleUrl: 'sc-subscription-details.css',\n  shadow: true,\n})\nexport class ScSubscriptionDetails {\n  @Prop() subscription: Subscription;\n  @Prop() pendingPrice: Price;\n  @Prop() hideRenewalText: boolean;\n\n  @State() activationsModal: boolean;\n  @State() loading: boolean;\n  @State() hasPendingUpdate: boolean;\n\n  renderName() {\n    if (typeof this.subscription?.price?.product !== 'string') {\n      return this.subscription?.price?.product?.name;\n    }\n    return __('Subscription', 'surecart');\n  }\n\n  @Watch('subscription')\n  async handleSubscriptionChange() {\n    this.hasPendingUpdate = !!Object.keys(this?.subscription?.pending_update || {})?.length;\n    if (this?.subscription?.pending_update?.price && !this?.pendingPrice && !this.hideRenewalText) {\n      this.pendingPrice = await this.fetchPrice(this.subscription.pending_update.price);\n    }\n  }\n\n  componentWillLoad() {\n    this.handleSubscriptionChange();\n  }\n\n  async fetchPrice(price_id: string) {\n    try {\n      this.loading = true;\n      const price = await apiFetch({\n        path: addQueryArgs(`surecart/v1/prices/${price_id}`, {\n          expand: ['product'],\n        }),\n      });\n      return price as Price;\n    } catch (e) {\n      console.error(e);\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  renderRenewalText() {\n    const tag = <sc-subscription-status-badge subscription={this?.subscription}></sc-subscription-status-badge>;\n\n    if (this?.subscription?.cancel_at_period_end && this?.subscription?.current_period_end_at) {\n      return (\n        <span>\n          {tag} {sprintf(__('Your plan will be canceled on', 'surecart'))}{' '}\n          <sc-format-date date={this.subscription.current_period_end_at * 1000} month=\"long\" day=\"numeric\" year=\"numeric\"></sc-format-date>\n        </span>\n      );\n    }\n\n    if (this.hasPendingUpdate) {\n      if (!this.pendingPrice && !this.subscription?.pending_update?.ad_hoc_amount) {\n        return <sc-skeleton></sc-skeleton>;\n      }\n\n      if (this.subscription?.pending_update?.ad_hoc_amount) {\n        return (\n          <span>\n            {__('Your plan switches to', 'surecart')}{' '}\n            <strong>\n              <sc-format-number\n                type=\"currency\"\n                currency={this.pendingPrice?.currency || this.subscription?.price?.currency}\n                value={this.subscription?.pending_update?.ad_hoc_amount}\n              ></sc-format-number>{' '}\n              {intervalString(this.pendingPrice || this.subscription?.price)}\n            </strong>{' '}\n            {__('on', 'surecart')}{' '}\n            <sc-format-date date={this.subscription.current_period_end_at as number} type=\"timestamp\" month=\"long\" day=\"numeric\" year=\"numeric\"></sc-format-date>\n          </span>\n        );\n      }\n      return (\n        <span>\n          {__('Your plan switches to', 'surecart')} <strong>{(this.pendingPrice.product as Product).name}</strong> {__('on', 'surecart')}{' '}\n          <sc-format-date date={this.subscription.current_period_end_at as number} type=\"timestamp\" month=\"long\" day=\"numeric\" year=\"numeric\"></sc-format-date>\n        </span>\n      );\n    }\n\n    if (this?.subscription?.status === 'trialing' && this?.subscription?.trial_end_at) {\n      return (\n        <span>\n          {tag} {sprintf(__('Your plan begins on', 'surecart'))}{' '}\n          <sc-format-date date={this?.subscription?.trial_end_at} type=\"timestamp\" month=\"long\" day=\"numeric\" year=\"numeric\"></sc-format-date>\n        </span>\n      );\n    }\n    if (this.subscription?.status === 'active' && this.subscription?.current_period_end_at) {\n      return (\n        <span>\n          {tag} {this.subscription?.remaining_period_count === null ? __('Your plan renews on', 'surecart') : __('Your next payment is on', 'surecart')}{' '}\n          <sc-format-date date={this?.subscription?.current_period_end_at} type=\"timestamp\" month=\"long\" day=\"numeric\" year=\"numeric\"></sc-format-date>\n        </span>\n      );\n    }\n\n    return tag;\n  }\n\n  getActivations() {\n    return (((this.subscription?.purchase as Purchase)?.license as License)?.activations?.data || []).filter(activation => {\n      return activation?.counted;\n    });\n  }\n\n  renderActivations() {\n    const activations = this.getActivations();\n    if (!activations?.length) return null;\n    return (\n      <sc-flex justifyContent=\"flex-start\" alignItems=\"center\">\n        <sc-tag size=\"small\">{activations?.[0]?.name}</sc-tag>\n        {activations?.length > 1 && (\n          <sc-text\n            style={{ '--font-size': 'var(--sc-font-size-small)', 'cursor': 'pointer' }}\n            onClick={e => {\n              e.preventDefault();\n              e.stopImmediatePropagation();\n              this.activationsModal = true;\n            }}\n          >\n            + {activations?.length - 1} More\n          </sc-text>\n        )}\n      </sc-flex>\n    );\n  }\n\n  render() {\n    return (\n      <div class=\"subscription-details\">\n        {this.hasPendingUpdate && (\n          <div>\n            <sc-tag size=\"small\" type=\"warning\">\n              {__('Update Scheduled', 'surecart')}\n            </sc-tag>\n          </div>\n        )}\n\n        <sc-flex alignItems=\"center\" justifyContent=\"flex-start\">\n          <sc-text style={{ '--font-weight': 'var(--sc-font-weight-bold)' }}>{this.renderName()}</sc-text>\n          {this.renderActivations()}\n        </sc-flex>\n\n        {!this.hideRenewalText && <div>{this.renderRenewalText()} </div>}\n\n        <slot />\n\n        <sc-dialog label={__('Activations', 'surecart')} onScRequestClose={() => (this.activationsModal = false)} open={!!this.activationsModal}>\n          <sc-card no-padding style={{ '--overflow': 'hidden' }}>\n            <sc-stacked-list>\n              {(this.getActivations() || []).map(activation => {\n                return (\n                  <sc-stacked-list-row style={{ '--columns': '2' }} mobileSize={0}>\n                    <sc-text style={{ '--line-height': 'var(--sc-line-height-dense)' }}>\n                      <strong>{activation?.name}</strong>\n                      <div>\n                        <sc-text style={{ '--color': 'var(--sc-color-gray-500)' }}>{activation?.fingerprint}</sc-text>\n                      </div>\n                    </sc-text>\n                    <sc-text style={{ '--color': 'var(--sc-color-gray-500)' }}>\n                      <sc-format-date type=\"timestamp\" month=\"short\" day=\"numeric\" year=\"numeric\" date={activation?.created_at}></sc-format-date>\n                    </sc-text>\n                  </sc-stacked-list-row>\n                );\n              })}\n            </sc-stacked-list>\n          </sc-card>\n        </sc-dialog>\n      </div>\n    );\n  }\n}\n",":host {\n  display: inline-block;\n}\n","import { Component, Fragment, h, Prop } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { Subscription, SubscriptionStatus } from '../../../types';\n\n@Component({\n  tag: 'sc-subscription-status-badge',\n  styleUrl: 'sc-subscription-status-badge.css',\n  shadow: true,\n})\nexport class ScSubscriptionStatusBadge {\n  /** Subscription status */\n  @Prop() status: SubscriptionStatus;\n\n  /** The tag's status type. */\n  @Prop() subscription: Subscription;\n\n  /** The tag's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** Draws a pill-style tag with rounded edges. */\n  @Prop({ reflect: true }) pill: boolean = false;\n\n  /** Makes the tag clearable. */\n  @Prop() clearable: boolean = false;\n\n  getType() {\n    if (this.subscription?.cancel_at_period_end) {\n      return 'info';\n    }\n    switch (this.status || this.subscription?.status) {\n      case 'incomplete':\n        return 'warning';\n      case 'trialing':\n        return 'info';\n      case 'active':\n        return 'success';\n      case 'completed':\n        return 'success';\n      case 'past_due':\n        return 'warning';\n      case 'canceled':\n        if (this.subscription?.restore_at) {\n          return 'info';\n        }\n        return 'danger';\n      case 'unpaid':\n        return 'warning';\n    }\n  }\n\n  getText() {\n    if (this.subscription?.cancel_at_period_end && this.subscription.current_period_end_at && this.subscription?.status !== 'canceled') {\n      return (\n        <Fragment>\n          {!!this.subscription?.restore_at ? __('Pauses', 'surecart') : __('Cancels', 'surecart')}{' '}\n          <sc-format-date type=\"timestamp\" date={this.subscription.current_period_end_at} month=\"short\" day=\"numeric\"></sc-format-date>\n        </Fragment>\n      );\n    }\n    switch (this.status || this.subscription?.status) {\n      case 'incomplete':\n        return __('Incomplete', 'surecart');\n      case 'trialing':\n        return __('Trialing', 'surecart');\n      case 'active':\n        return __('Active', 'surecart');\n      case 'past_due':\n        return __('Past Due', 'surecart');\n      case 'canceled':\n        if (this.subscription?.restore_at) {\n          return 'Paused';\n        }\n        return __('Canceled', 'surecart');\n      case 'completed':\n        return __('Completed', 'surecart');\n      case 'unpaid':\n        return __('Unpaid', 'surecart');\n    }\n  }\n\n  render() {\n    return <sc-tag type={this.getType()}>{this.getText()}</sc-tag>;\n  }\n}\n"],"mappings":"sLAAA,MAAMA,EAA2B,uG,yfC0BtBC,GAAAC,KAAAC,GAAE,0B,6pCAqCIF,GAAAC,KAAAE,QAAQH,GAAAC,KAAAC,GAAE,iDAAAE,EAAA,kBAAAC,KAAAC,KAAAC,aAAAC,sBAAA,IAAAC,MAAA,OAAAC,IAAA,UAAAC,KAAA,Y,0UAcdX,GAAAC,KAAAC,GAAE,wCAAAE,EAAA,cAAAA,EAAA,oBAAAQ,KAAA,WAAAC,WAAAC,EAAAR,KAAAS,gBAAA,MAAAD,SAAA,SAAAA,EAAAD,aAAAG,GAAAC,EAAAX,KAAAC,gBAAA,MAAAU,SAAA,SAAAA,EAAAC,SAAA,MAAAF,SAAA,SAAAA,EAAAH,UAAAM,OAAAC,GAAAC,EAAAf,KAAAC,gBAAA,MAAAc,SAAA,SAAAA,EAAAC,kBAAA,MAAAF,SAAA,SAAAA,EAAAG,gBAAA,IAAAC,EAAAlB,KAAAS,gBAAAU,EAAAnB,KAAAC,gBAAA,MAAAkB,SAAA,SAAAA,EAAAP,SAAA,IASFlB,GAAAC,KAAAC,GAAE,qBAAAE,EAAA,kBAAAC,KAAAC,KAAAC,aAAAC,sBAAAI,KAAA,YAAAH,MAAA,OAAAC,IAAA,UAAAC,KAAA,Y,sBAOJX,GAAAC,KAAAC,GAAE,wCAAAE,EAAA,cAAAE,KAAAS,aAAAW,QAAAC,MAAA,IAAuG3B,GAAAC,KAAAC,GAAE,qBAAAE,EAAA,kBAAAC,KAAAC,KAAAC,aAAAC,sBAAAI,KAAA,YAAAH,MAAA,OAAAC,IAAA,UAAAC,KAAA,Y,8OASrGX,GAAAC,KAAAE,QAAQH,GAAAC,KAAAC,GAAE,uCAAAE,EAAA,kBAAAC,MAAAuB,EAAAtB,OAAA,MAAAA,YAAA,SAAAA,KAAAC,gBAAA,MAAAqB,SAAA,SAAAA,EAAAC,aAAAjB,KAAA,YAAAH,MAAA,OAAAC,IAAA,UAAAC,KAAA,Y,mQAQ2CX,GAAAC,KAAAC,GAAE,kCAAsCF,GAAAC,KAAAC,GAAE,0CAAAE,EAAA,kBAAAC,MAAAyB,EAAAxB,OAAA,MAAAA,YAAA,SAAAA,KAAAC,gBAAA,MAAAuB,SAAA,SAAAA,EAAAtB,sBAAAI,KAAA,YAAAH,MAAA,OAAAC,IAAA,UAAAC,KAAA,Y,g8BA2CjGX,GAAAC,KAAAC,GAAE,iCAAAE,EAAA,WAAA2B,WAAA,SAAAC,eAAA,cAAA5B,EAAA,WAAA6B,MAAA,gDAAA3B,KAAA4B,cAAA5B,KAAA6B,sBAAA7B,KAAA8B,iBAAAhC,EAAA,WAAAE,KAAA+B,oBAAA,KAAAjC,EAAA,aAAAA,EAAA,aAAAkC,MAcStC,GAAAC,KAAAC,GAAE,0BAAAqC,iBAAA,IAAAjC,KAAAkC,iBAAA,MAAAC,OAAAnC,KAAAkC,kBAAApC,EAAA,6BAAA6B,MAAA,yBAAA7B,EAAA,wBAAAE,KAAAoC,kBAAA,IAAAC,KAAAC,G,mkBCvK5B,MAAMC,EAA+B,8B,w5BCsDQ7C,GAAAC,KAAAC,GAAE,qBAAyBF,GAAAC,KAAAC,GAAE,0BAAAE,EAAA,kBAAAQ,KAAA,YAAAP,KAAAC,KAAAC,aAAAC,sBAAAC,MAAA,QAAAC,IAAA,Y,yGAO3DV,GAAAC,KAAAC,GAAE,yB,sBAEFF,GAAAC,KAAAC,GAAE,uB,oBAEFF,GAAAC,KAAAC,GAAE,qB,sBAEFF,GAAAC,KAAAC,GAAE,uB,sGAKFF,GAAAC,KAAAC,GAAE,uB,uBAEFF,GAAAC,KAAAC,GAAE,wB,oBAEFF,GAAAC,KAAAC,GAAE,qB"}