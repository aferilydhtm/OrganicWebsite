{"version":3,"names":["scRadioCss","id","ScRadio","this","inputId","labelId","async","input","click","invalid","checkValidity","reportValidity","handleCheckedChange","checked","getSiblingRadios","map","radio","scChange","emit","handleClick","handleBlur","hasFocus","scBlur","handleFocus","scFocus","setCustomValidity","message","getAllRadios","radioGroup","el","closest","querySelectorAll","filter","handleKeyDown","event","edit","includes","key","radios","disabled","incr","index","indexOf","length","focus","preventDefault","handleMouseDown","componentDidLoad","formController","FormSubmitController","value","control","undefined","addFormData","disconnectedCallback","_a","removeFormData","render","Tag","h","part","class","htmlFor","onKeyDown","e","onMouseDown","viewBox","stroke","fill","cx","cy","r","ref","type","name","required","onClick","onBlur","onFocus"],"sources":["./src/components/ui/radio/sc-radio.scss?tag=sc-radio&encapsulation=shadow","./src/components/ui/radio/sc-radio.tsx"],"sourcesContent":[":host {\n  display: inline-block;\n}\n\n.radio {\n  display: inline-flex;\n  align-items: center;\n  font-family: var(--sc-input-font-family);\n  font-size: var(--sc-input-font-size-medium);\n  font-weight: var(--sc-input-font-weight);\n  color: var(--sc-input-color);\n  vertical-align: middle;\n}\n\n.radio:not(.radio--editing) {\n  cursor: pointer;\n}\n\n.radio__icon {\n  display: inline-flex;\n  width: var(--sc-radio-size);\n  height: var(--sc-radio-size);\n\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n}\n\n.radio__control {\n  flex: 0 0 auto;\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: var(--sc-radio-size);\n  height: var(--sc-radio-size);\n  border: solid var(--sc-input-border-width) var(--sc-input-border-color);\n  border-radius: 50%;\n  background-color: var(--sc-input-background-color);\n  color: transparent;\n  transition: var(--sc-input-transition, var(--sc-transition-medium)) border-color, var(--sc-input-transition, var(--sc-transition-medium)) opacity, var(--sc-input-transition, var(--sc-transition-medium)) background-color, var(--sc-input-transition, var(--sc-transition-medium)) color, var(--sc-input-transition, var(--sc-transition-medium)) box-shadow;\n\n  input[type='radio'] {\n    position: absolute;\n    opacity: 0;\n    padding: 0;\n    margin: 0;\n    pointer-events: none;\n  }\n}\n\n// Hover\n.radio:not(.radio--checked):not(.radio--disabled) .radio__control:hover {\n  border-color: var(--sc-input-border-color-hover);\n  background-color: var(--sc-input-background-color-hover);\n}\n\n// Focus\n.radio.radio--focused:not(.radio--checked):not(.radio--disabled) .radio__control {\n  border-color: var(--sc-input-border-color-focus);\n  background-color: var(--sc-input-background-color-focus);\n  box-shadow: 0 0 0 var(--sc-focus-ring-width) var(--sc-focus-ring-color-primary);\n}\n\n// Checked\n.radio--checked .radio__control {\n  color: var(--var-sc-checked-radio-background-color, var(--sc-input-background-color));\n  border-color: var(--sc-color-primary-500);\n  background-color: var(--sc-color-primary-500);\n}\n\n// Checked + hover\n.radio.radio--checked:not(.radio--disabled) .radio__control:hover {\n  opacity: 0.8;\n}\n\n// Checked + focus\n.radio.radio--checked:not(.radio--disabled).radio--focused .radio__control {\n  border-color: var(--var-sc-checked-radio-border-color, var(--sc-input-background-color));\n  background-color: var(--sc-color-primary-500);\n  box-shadow: 0 0 0 var(--sc-focus-ring-width) var(--sc-focus-ring-color-primary);\n}\n\n// Disabled\n.radio--disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n// When the control isn't checked, hide the circle for Windows High Contrast mode a11y\n.radio:not(.radio--checked) svg circle {\n  opacity: 0;\n}\n\n.radio__label {\n  line-height: var(--sc-radio-size);\n  margin-left: 0.5em;\n  user-select: none;\n}\n","import { Component, Prop, h, Event, EventEmitter, Method, State, Element, Watch } from '@stencil/core';\nimport { FormSubmitController } from '../../../functions/form-data';\n\nlet id = 0;\n\n/**\n * @part base - The elements base wrapper.\n * @part control - The control wrapper.\n * @part checked-icon - Checked icon.\n * @part label - The label.\n */\n@Component({\n  tag: 'sc-radio',\n  styleUrl: 'sc-radio.scss',\n  shadow: true,\n})\nexport class ScRadio {\n  @Element() el: HTMLScRadioElement;\n  private input: HTMLInputElement;\n  private formController: any;\n  private inputId: string = `radio-${++id}`;\n  private labelId: string = `radio-label-${id}`;\n\n  /** Does the radio have focus */\n  @State() hasFocus: boolean = false;\n\n  /** The radios name attribute */\n  @Prop() name: string;\n\n  /** The radios value */\n  @Prop() value: string;\n\n  /** Is the radio disabled */\n  @Prop({ reflect: true, mutable: true }) disabled: boolean = false;\n\n  /** Draws the radio in a checked state. */\n  @Prop({ reflect: true, mutable: true }) checked: boolean = false;\n\n  /** Is this required */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** This will be true when the control is in an invalid state. Validity is determined by the `required` prop. */\n  @Prop({ reflect: true, mutable: true }) invalid: boolean = false;\n\n  /** This will be true as a workaround in the block editor to focus on the content. */\n  @Prop() edit: boolean;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  /** Emitted when the control's checked state changes. */\n  @Event() scChange: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  /** Simulates a click on the radio. */\n  @Method()\n  async ceClick() {\n    this.input.click();\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  @Method()\n  async reportValidity() {\n    this.invalid = !this.input.checkValidity();\n    return this.input.reportValidity();\n  }\n\n  @Watch('checked')\n  handleCheckedChange() {\n    if (!this.input) return;\n    if (this.checked) {\n      this.getSiblingRadios().map(radio => (radio.checked = false));\n    }\n    this.input.checked = this.checked;\n    this.scChange.emit();\n  }\n\n  handleClick() {\n    this.checked = true;\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.scBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.scFocus.emit();\n  }\n\n  /** Sets a custom validation message. If `message` is not empty, the field will be considered invalid. */\n  setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  getAllRadios() {\n    const radioGroup = this.el.closest('sc-radio-group');\n    // Radios must be part of a radio group\n    if (!radioGroup) {\n      return [];\n    }\n    return [...radioGroup.querySelectorAll('sc-radio')] as HTMLScRadioElement[];\n  }\n\n  getSiblingRadios() {\n    return this.getAllRadios().filter(radio => radio !== this.el) as HTMLScRadioElement[];\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    if (this.edit) return true;\n\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\n      const radios = this.getAllRadios().filter(radio => !radio.disabled);\n      const incr = ['ArrowUp', 'ArrowLeft'].includes(event.key) ? -1 : 1;\n      let index = radios.indexOf(this.el) + incr;\n      if (index < 0) index = radios.length - 1;\n      if (index > radios.length - 1) index = 0;\n\n      this.getAllRadios().map(radio => (radio.checked = false));\n      radios[index].focus();\n      radios[index].checked = true;\n\n      event.preventDefault();\n    }\n  }\n\n  // Prevent clicks on the label from briefly blurring the input\n  handleMouseDown(event: MouseEvent) {\n    if (this.edit) return true;\n    event.preventDefault();\n    this.input.focus();\n  }\n\n  componentDidLoad() {\n    this.formController = new FormSubmitController(this.el, {\n      value: (control: HTMLScChoiceElement) => (control.checked ? control.value : undefined),\n    }).addFormData();\n  }\n\n  disconnectedCallback() {\n    this.formController?.removeFormData();\n  }\n\n  render() {\n    const Tag = this.edit ? 'div' : 'label';\n    return (\n      <Tag\n        part=\"base\"\n        class={{\n          'radio': true,\n          'radio--checked': this.checked,\n          'radio--disabled': this.disabled,\n          'radio--focused': this.hasFocus,\n          'radio--editing': this.edit,\n        }}\n        htmlFor={this.inputId}\n        onKeyDown={e => this.handleKeyDown(e)}\n        onMouseDown={e => this.handleMouseDown(e)}\n      >\n        <span part=\"control\" class=\"radio__control\">\n          <span part=\"checked-icon\" class=\"radio__icon\">\n            <svg viewBox=\"0 0 16 16\">\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g fill=\"currentColor\">\n                  <circle cx=\"8\" cy=\"8\" r=\"3.42857143\"></circle>\n                </g>\n              </g>\n            </svg>\n          </span>\n          <input\n            id={this.inputId}\n            ref={el => (this.input = el as HTMLInputElement)}\n            type=\"radio\"\n            name={this.name}\n            value={this.value}\n            checked={this.checked}\n            disabled={this.disabled}\n            required={this.required}\n            aria-checked={this.checked ? 'true' : 'false'}\n            aria-disabled={this.disabled ? 'true' : 'false'}\n            aria-labelledby={this.labelId}\n            onClick={() => this.handleClick()}\n            onBlur={() => this.handleBlur()}\n            onFocus={() => this.handleFocus()}\n          />\n        </span>\n        <span part=\"label\" id={this.labelId} class=\"radio__label\">\n          <slot></slot>\n        </span>\n      </Tag>\n    );\n  }\n}\n"],"mappings":"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"}