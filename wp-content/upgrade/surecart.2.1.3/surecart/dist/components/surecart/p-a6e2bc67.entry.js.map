{"version":3,"names":["scOrderPasswordCss","wp","i18n","__","help","this","confirmationHelp","placeholder","confirmationPlaceholder","size","type","value","required","disabled","openWormhole","ScOrderPassword"],"sources":["./src/components/controllers/checkout-form/order-password/sc-order-password.scss?tag=sc-order-password&encapsulation=shadow","./src/components/controllers/checkout-form/order-password/sc-order-password.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.password {\n  display: grid;\n  gap: var(--sc-form-row-spacing, 0.75em);\n}\n","import { Component, Prop, h, Method, Host } from '@stencil/core';\nimport { openWormhole } from 'stencil-wormhole';\nimport { __ } from '@wordpress/i18n';\n\n@Component({\n  tag: 'sc-order-password',\n  styleUrl: 'sc-order-password.scss',\n  shadow: true,\n})\nexport class ScOrderPassword {\n  private input: HTMLScInputElement;\n  private confirmInput: HTMLScInputElement;\n\n  @Prop() loggedIn: boolean;\n\n  /** The input's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The input's value attribute. */\n  @Prop({ mutable: true }) value = '';\n\n  /** Draws a pill-style input with rounded edges. */\n  @Prop({ reflect: true }) pill = false;\n\n  /** The input's label. */\n  @Prop() label: string;\n\n  /** Should we show the label */\n  @Prop() showLabel: boolean = true;\n\n  /** The input's help text. */\n  @Prop() help: string = '';\n\n  /** The input's placeholder text. */\n  @Prop() placeholder: string;\n\n  /** Disables the input. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** Makes the input readonly. */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /** Makes the input a required field. */\n  @Prop({ reflect: true }) required = false;\n\n  /** The input's autofocus attribute. */\n  @Prop() autofocus: boolean;\n\n  /** Does the email exist? */\n  @Prop() emailExists: boolean;\n\n  /** The input's password confirmation attribute. */\n  @Prop({ reflect: true }) confirmation = false;\n\n  /** The input's confirmation label text. */\n  @Prop() confirmationLabel: string;\n\n  /** The input's confirmation placeholder text. */\n  @Prop() confirmationPlaceholder: string;\n\n  /** The input's confirmation help text. */\n  @Prop() confirmationHelp: string;\n\n  /** Ensures strong password validation. */\n  @Prop({ reflect: true }) enableValidation = true;\n\n  @Method()\n  async reportValidity() {\n    if (this.loggedIn) return true;\n\n    this.input?.setCustomValidity?.('');\n    this.confirmInput?.setCustomValidity?.('');\n\n    // confirmation is enabled.\n    if (this.confirmation) {\n      if (this.confirmInput?.value && this.input?.value !== this.confirmInput?.value) {\n        this.confirmInput.setCustomValidity(__('Password does not match.', 'surecart'));\n      }\n    }\n\n    if (this.enableValidation) {\n      const validPassword = this.validatePassword(this.input?.value);\n      if (!validPassword) {\n        this.input.setCustomValidity(__('Passwords should at least 6 characters and contain one special character.', 'surecart'));\n      }\n    }\n\n    const valid = await this.input.reportValidity();\n    if (!valid) {\n      return false;\n    }\n\n    if (this.confirmInput) {\n      return this.confirmInput.reportValidity();\n    }\n\n    return valid;\n  }\n\n  validatePassword(password: string) {\n    const regex = new RegExp('^(?=.*?[#?!@$%^&*-]).{6,}$');\n    if (regex.test(password)) return true;\n    return false;\n  }\n\n  render() {\n    if (this.loggedIn) {\n      return <Host style={{ display: 'none' }}></Host>;\n    }\n\n    // if (this.emailExists) {\n    //   return <Host style={{ display: 'none' }}></Host>;\n    // }\n\n    return (\n      <div class=\"password\">\n        <sc-input\n          ref={el => (this.input = el as HTMLScInputElement)}\n          label={this.label}\n          help={this.help}\n          autofocus={this.autofocus}\n          placeholder={this.placeholder}\n          showLabel={this.showLabel}\n          size={this.size ? this.size : 'medium'}\n          type=\"password\"\n          name=\"password\"\n          value={this.value}\n          required={this.required}\n          disabled={this.disabled}\n        ></sc-input>\n        {this.confirmation && (\n          <sc-input\n            ref={el => (this.confirmInput = el as HTMLScInputElement)}\n            label={this.confirmationLabel ?? __('Confirm Password', 'surecart')}\n            help={this.confirmationHelp}\n            placeholder={this.confirmationPlaceholder}\n            size={this.size ? this.size : 'medium'}\n            type=\"password\"\n            value={this.value}\n            required={this.required}\n            disabled={this.disabled}\n          ></sc-input>\n        )}\n      </div>\n    );\n  }\n}\n\nopenWormhole(ScOrderPassword, ['loggedIn', 'emailExists'], false);\n"],"mappings":"sFAAA,MAAMA,EAAqB,qF,m9BC4EiBC,GAAAC,KAAAC,GAAE,uC,gJAOTF,GAAAC,KAAAC,GAAE,wF,kuBAkDMF,GAAAC,KAAAC,GAAE,+BAAAC,KAAAC,KAAAC,iBAAAC,YAAAF,KAAAG,wBAAAC,KAAAJ,KAAAI,KAAAJ,KAAAI,KAAA,SAAAC,KAAA,WAAAC,MAAAN,KAAAM,MAAAC,SAAAP,KAAAO,SAAAC,SAAAR,KAAAQ,W,GAe/CC,EAAAC,EAAA,kC"}