{"version":3,"names":["state","onChange","on","dispose","createStore","processors","methods","manualPaymentMethods","disabled","sortOrder","paymentMethods","mollie","config","stripe","paymentElement","newValue","oldValue","JSON","stringify","availableProcessors","sortByArray","filter","processor","live_mode","checkoutState","mode","includes","processor_type","_a","checkout","reusable_payment_method_required","recurring_enabled","_","filtered","some","p","getAvailableProcessor","type","find","availableManualPaymentMethods","id","availableMethodTypes","availableProcessorChoices","hasMultipleProcessorChoices","length","availableMethodChoices","hasMultipleMethodChoices"],"sources":["./src/store/processors/store.ts","./src/store/processors/getters.ts"],"sourcesContent":["import { createStore } from '@stencil/store';\nimport { ManualPaymentMethod, PaymentMethodType, Processor } from '../../types';\n\ninterface Store {\n  processors: Processor[];\n  methods: PaymentMethodType[];\n  manualPaymentMethods: ManualPaymentMethod[];\n  disabled: {\n    processors: string[];\n  };\n  sortOrder: {\n    processors: string[];\n    manualPaymentMethods: string[];\n    paymentMethods: {\n      mollie: string[];\n    };\n  };\n  config: {\n    stripe: {\n      paymentElement: boolean;\n    };\n  };\n}\n\nconst { state, onChange, on, dispose } = createStore<Store>(\n  {\n    processors: [],\n    methods: [],\n    manualPaymentMethods: [],\n    disabled: {\n      processors: [],\n    },\n    sortOrder: {\n      processors: ['stripe', 'paypal'],\n      manualPaymentMethods: [],\n      paymentMethods: {\n        mollie: ['creditcard', 'paypal'],\n      },\n    },\n    config: {\n      stripe: {\n        paymentElement: false,\n      },\n    },\n  },\n  (newValue, oldValue) => {\n    return JSON.stringify(newValue) !== JSON.stringify(oldValue);\n  },\n);\n\nexport default state;\nexport { state, onChange, on, dispose };\n","import { sortByArray } from '../../functions/util';\nimport state from './store';\nimport { state as checkoutState } from '@store/checkout';\n\n/**\n * Gets a sorted array of available processors based on\n * checkout mode, recurring requirements, and if mollie is enabled.\n */\nexport const availableProcessors = () =>\n  sortByArray(state.processors, 'processor_type', state.sortOrder.processors) // sort.\n    .filter(processor => processor?.live_mode === (checkoutState?.mode === 'live')) // match mode.\n    .filter(processor => !(state.disabled.processors || []).includes(processor.processor_type)) // make sure it's not disabled.\n    .filter(processor => (!!checkoutState?.checkout?.reusable_payment_method_required ? !!processor?.recurring_enabled : true)) // recurring.\n    .filter((processor, _, filtered) => (filtered.some(p => p.processor_type === 'mollie') ? processor.processor_type === 'mollie' : true)); // only allow mollie if preset.\n\n/**\n * Gets an available processor type.\n */\nexport const getAvailableProcessor = (type: string) => availableProcessors().find(({ processor_type }) => processor_type === type);\n\n/**\n * Get a sorted array of manual payment methods\n * based on recurring requirements.\n */\nexport const availableManualPaymentMethods = () =>\n  !checkoutState?.checkout?.reusable_payment_method_required\n    ? sortByArray(state.manualPaymentMethods, 'id', state.sortOrder.manualPaymentMethods).filter(processor => !(state.disabled.processors || []).includes(processor?.id))\n    : [];\n\n/**\n * Get a sorted array of mollie payment method types.\n */\nexport const availableMethodTypes = () => sortByArray(state.methods, 'id', state.sortOrder.paymentMethods.mollie);\n\n/**\n * Get a combined available processor choices (processors + manual payment methods)\n */\nexport const availableProcessorChoices = () => [...availableProcessors(), ...availableManualPaymentMethods()];\n\n/**\n * Do we have multiple processors.\n */\nexport const hasMultipleProcessorChoices = () => availableProcessorChoices()?.length > 1;\n\n/**\n * Get a combined available payment methods (method types + manual payment methods)\n */\nexport const availableMethodChoices = () => [...availableMethodTypes(), ...availableManualPaymentMethods()];\n\n/**\n * Do we have multiple payment methods.\n */\nexport const hasMultipleMethodChoices = () => availableMethodChoices()?.length > 1;\n"],"mappings":"kHAwBMA,MAAEA,EAAKC,SAAEA,EAAQC,GAAEA,EAAEC,QAAEA,GAAYC,EACvC,CACEC,WAAY,GACZC,QAAS,GACTC,qBAAsB,GACtBC,SAAU,CACRH,WAAY,IAEdI,UAAW,CACTJ,WAAY,CAAC,SAAU,UACvBE,qBAAsB,GACtBG,eAAgB,CACdC,OAAQ,CAAC,aAAc,YAG3BC,OAAQ,CACNC,OAAQ,CACNC,eAAgB,UAItB,CAACC,EAAUC,IACFC,KAAKC,UAAUH,KAAcE,KAAKC,UAAUF,K,MCtC1CG,EAAsB,IACjCC,EAAYpB,EAAMK,WAAY,iBAAkBL,EAAMS,UAAUJ,YAC7DgB,QAAOC,IAAaA,IAAS,MAATA,SAAS,SAATA,EAAWC,eAAeC,IAAa,MAAbA,SAAa,SAAbA,EAAeC,QAAS,UACtEJ,QAAOC,KAAetB,EAAMQ,SAASH,YAAc,IAAIqB,SAASJ,EAAUK,kBAC1EN,QAAOC,IAAS,IAAAM,EAAI,UAAGA,EAAAJ,IAAa,MAAbA,SAAa,SAAbA,EAAeK,YAAQ,MAAAD,SAAA,SAAAA,EAAEE,qCAAqCR,IAAS,MAATA,SAAS,SAATA,EAAWS,mBAAoB,IAAI,IACxHV,QAAO,CAACC,EAAWU,EAAGC,IAAcA,EAASC,MAAKC,GAAKA,EAAER,iBAAmB,WAAYL,EAAUK,iBAAmB,SAAW,O,MAKxHS,EAAyBC,GAAiBlB,IAAsBmB,MAAK,EAAGX,oBAAqBA,IAAmBU,I,MAMhHE,EAAgC,K,MAC3C,SAACX,EAAAJ,IAAa,MAAbA,SAAa,SAAbA,EAAeK,YAAQ,MAAAD,SAAA,SAAAA,EAAEE,kCACtBV,EAAYpB,EAAMO,qBAAsB,KAAMP,EAAMS,UAAUF,sBAAsBc,QAAOC,KAAetB,EAAMQ,SAASH,YAAc,IAAIqB,SAASJ,IAAS,MAATA,SAAS,SAATA,EAAWkB,MAC/J,EAAE,E,MAKKC,EAAuB,IAAMrB,EAAYpB,EAAMM,QAAS,KAAMN,EAAMS,UAAUC,eAAeC,QAKnG,MAAM+B,EAA4B,IAAM,IAAIvB,OAA0BoB,K,MAKhEI,EAA8B,SAAAf,EAAM,QAAAA,EAAAc,OAA2B,MAAAd,SAAA,SAAAA,EAAEgB,QAAS,CAAC,EAKjF,MAAMC,EAAyB,IAAM,IAAIJ,OAA2BF,K,MAK9DO,EAA2B,SAAAlB,EAAM,QAAAA,EAAAiB,OAAwB,MAAAjB,SAAA,SAAAA,EAAEgB,QAAS,CAAC,S"}