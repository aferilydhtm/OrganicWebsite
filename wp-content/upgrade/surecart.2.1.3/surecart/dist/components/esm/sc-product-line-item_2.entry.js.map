{"file":"sc-product-line-item.sc-quantity-select.entry.js","mappings":";;;;AAAA,MAAM,oBAAoB,GAAG,61FAA61F;;;;;;;;;;;;;;;;;;;;;;;;;;4JC0F52F,eAAO,CAAC,UAAE;;MAMV,UAAE,4cAQyC,eAAO,CAAC,UAAE;;;;;6xBA6ClD,UAAE;;;;;;;;;;ACrJnB,MAAM,mBAAmB,GAAG,yxHAAyxH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oECmG/xH,UAAE,6xBAgCF,UAAE;;;;;;;;","names":[],"sources":["./src/components/ui/product-line-item/sc-product-line-item.scss?tag=sc-product-line-item&encapsulation=shadow","./src/components/ui/product-line-item/sc-product-line-item.tsx","./src/components/ui/quantity-select/sc-quantity-select.scss?tag=sc-quantity-select&encapsulation=shadow","./src/components/ui/quantity-select/sc-quantity-select.tsx"],"sourcesContent":[":host {\n  display: block;\n  font-family: var(--sc-font-sans);\n}\n\n.item {\n  box-sizing: border-box;\n  margin: 0px;\n  min-width: 0px;\n  display: flex;\n  gap: 18px;\n  justify-content: space-between;\n  align-items: stretch;\n  width: 100%;\n  border-bottom: none;\n\n  &--has-image {\n    align-items: center;\n    container-type: inline-size;\n    @container (max-width: 290px) {\n      .item__image {\n        display: none;\n      }\n    }\n  }\n\n  &__scratch-price {\n    opacity: 0.75;\n    font-size: 90%;\n    text-decoration: line-through;\n  }\n}\n\n.item__text {\n  box-sizing: border-box;\n  margin: 0px;\n  min-width: 0px;\n  display: flex;\n  gap: 6px;\n  flex-direction: column;\n  align-items: flex-start;\n  justify-content: flex-start;\n  flex: 1 1 0%;\n}\n\n.item__title {\n  box-sizing: border-box;\n  min-width: 0px;\n  margin: 0;\n  color: var(--sc-line-item-title-color, var(--sc-input-label-color));\n  font-weight: var(--sc-font-weight-semibold);\n  font-size: var(--sc-font-size-medium);\n  line-height: var(--sc-line-height-dense);\n  cursor: pointer;\n  display: -webkit-box;\n  display: -moz-box;\n  -webkit-box-orient: vertical;\n  -moz-box-orient: vertical;\n  -webkit-line-clamp: 3;\n  -moz-box-lines: 3;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.item__suffix {\n  flex: 1;\n  box-sizing: border-box;\n  margin: 0px;\n  min-width: 0px;\n  display: flex;\n  flex-direction: column;\n  -webkit-box-pack: start;\n  justify-content: space-between;\n  align-items: flex-end;\n  min-width: 100px;\n  margin-left: auto;\n}\n\n.item__price {\n  text-align: right;\n  max-width: 100%;\n}\n\n.item__description {\n  font-size: var(--sc-font-size-small);\n  line-height: var(--sc-line-height-dense);\n  opacity: 0.75;\n}\n\n.item__image {\n  width: var(--sc-product-line-item-image-size, 4em);\n  height: var(--sc-product-line-item-image-size, 4em);\n  object-fit: cover;\n  border-radius: 4px;\n  border: solid 1px var(--sc-input-border-color, var(--sc-input-border));\n  display: block;\n  box-shadow: var(--sc-input-box-shadow);\n}\n\n.product__description {\n  display: flex;\n  gap: 0.5em;\n  align-items: center;\n}\n\n.price {\n  font-size: var(--sc-font-size-medium);\n  font-weight: var(--sc-font-weight-semibold);\n  color: var(--sc-input-label-color);\n  line-height: var(--sc-line-height-dense);\n}\n\n.price__description {\n  font-size: var(--sc-font-size-small);\n  line-height: var(--sc-line-height-dense);\n  color: var(--sc-input-label-color);\n  opacity: 0.75;\n}\n\n.item__remove {\n  cursor: pointer;\n  color: var(--sc-color-gray-400);\n  margin-bottom: var(--sc-spacing-small);\n}\n\n.actions__divider {\n  opacity: 0.25;\n  margin: 0 0.2em;\n}\n\n.item--is-rtl {\n  &.price {\n    text-align: right;\n  }\n  .item__price {\n    text-align: left;\n  }\n}\n\n.base {\n  display: grid;\n  gap: var(--sc-spacing-x-small);\n}\n\n.fee__description {\n  opacity: 0.75;\n}\n","import { Component, h, Prop, Event, EventEmitter, Element, Fragment } from '@stencil/core';\nimport { __, _n, sprintf } from '@wordpress/i18n';\nimport { isRtl } from '../../../functions/page-align';\nimport { Fee, Media } from '../../../types';\nimport { sizeImage } from '../../../functions/media';\n\n/**\n * @part base - The elements base wrapper.\n * @part text - The text wrapper.\n * @part title - The product title.\n * @part static-quantity - The statically displayed quantity.\n * @part quantity__base - The quantity base wrapper.\n * @part input - The input control.\n * @part minus - The minus control.\n * @part minus-icon - The minus icon.\n * @part plus - The plus control.\n * @part plus-icon - The plus icon.\n * @part remove-icon__base - The remove icon base wrapper.\n * @part price - The price wrapper.\n * @part price__amount - The price amount.\n * @part price__description - The price description.\n * @part suffix - The suffix items.\n */\n@Component({\n  tag: 'sc-product-line-item',\n  styleUrl: 'sc-product-line-item.scss',\n  shadow: true,\n})\nexport class ScProductLineItem {\n  @Element() el: HTMLScProductLineItemElement;\n\n  /** Url for the product image */\n  @Prop() imageUrl: string;\n\n  /** The product media */\n  @Prop() media: Media;\n\n  /** Product name */\n  @Prop() name: string;\n\n  /** Quantity */\n  @Prop() quantity: number;\n\n  /** Product monetary amount */\n  @Prop() amount: number;\n\n  /** Product line item fees. */\n  @Prop() fees: Fee[];\n\n  /** Is the setup fee not included in the free trial? */\n  @Prop() setupFeeTrialEnabled: boolean = true;\n\n  /** The line item scratch amount */\n  @Prop() scratchAmount: number;\n\n  /** Currency for the product */\n  @Prop() currency: string;\n\n  /** Recurring interval (i.e. monthly, once, etc.) */\n  @Prop() interval: string;\n\n  /** Trial duration days */\n  @Prop() trialDurationDays: number;\n\n  /** Is the line item removable */\n  @Prop() removable: boolean;\n\n  /** Can we select the quantity */\n  @Prop() editable: boolean = true;\n\n  /** The max allowed. */\n  @Prop() max: number = 100;\n\n  /** Emitted when the quantity changes. */\n  @Event({ bubbles: false }) scUpdateQuantity: EventEmitter<number>;\n\n  /** Emitted when the quantity changes. */\n  @Event({ bubbles: false }) scRemove: EventEmitter<void>;\n\n  renderPriceAndInterval() {\n    const setupFee = (this.fees || []).find(fee => fee.fee_type === 'setup');\n    if (this.trialDurationDays) {\n      return (\n        <div class=\"item__price\" part=\"price\">\n          <div class=\"price\" part=\"price__amount\">\n            {!!setupFee && !this.setupFeeTrialEnabled ? (\n              <Fragment>\n                {setupFee?.description} <sc-format-number part=\"price__amount\" type=\"currency\" currency={this.currency} value={setupFee.amount}></sc-format-number>\n              </Fragment>\n            ) : (\n              sprintf(_n('%d day free', '%d days free', this.trialDurationDays, 'surecart'), this.trialDurationDays)\n            )}\n          </div>\n          <div class=\"price__description\" part=\"price__description\">\n            {\n              /** translators: 30 days free, Then $99 per month. */\n              __('Then', 'surecart')\n            }{' '}\n            {!!this.scratchAmount && this.scratchAmount > this.amount && (\n              <Fragment>\n                <sc-format-number class=\"item__scratch-price\" part=\"price__scratch\" type=\"currency\" currency={this.currency} value={this.scratchAmount}></sc-format-number>{' '}\n              </Fragment>\n            )}\n            <sc-format-number part=\"price__amount\" type=\"currency\" currency={this.currency} value={this.amount}></sc-format-number> {!!this.interval && this.interval}\n            {!!setupFee && !this.setupFeeTrialEnabled && sprintf(_n('starting in %d day', 'starting in %d days', this.trialDurationDays, 'surecart'), this.trialDurationDays)}\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <div class=\"item__price\" part=\"price\">\n        <div class=\"price\" part=\"price__amount\">\n          {!!this.scratchAmount && this.scratchAmount !== this.amount && (\n            <Fragment>\n              <sc-format-number class=\"item__scratch-price\" type=\"currency\" currency={this.currency} value={this.scratchAmount}></sc-format-number>{' '}\n            </Fragment>\n          )}\n          <sc-format-number type=\"currency\" currency={this.currency} value={this.amount}></sc-format-number>\n        </div>\n        {!!this.interval && (\n          <div class=\"price__description\" part=\"price__description\">\n            {this.interval}\n          </div>\n        )}\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div class=\"base\" part=\"base\">\n        <div part=\"product-line-item\" class={{ 'item': true, 'item--has-image': !!this.imageUrl, 'item--is-rtl': isRtl() }}>\n          {!!this.imageUrl && <img part=\"image\" src={sizeImage(this.imageUrl, 130)} class=\"item__image\" />}\n          <div class=\"item__text\" part=\"text\">\n            <div class=\"item__title\" part=\"title\">\n              <slot name=\"title\">{this.name}</slot>\n            </div>\n            {this.editable && (\n              <sc-quantity-select\n                max={this.max || Infinity}\n                exportparts=\"base:quantity__base, minus, minus-icon, plus, plus-icon, input\"\n                clickEl={this.el}\n                quantity={this.quantity}\n                onScChange={e => e.detail && this.scUpdateQuantity.emit(e.detail)}\n              ></sc-quantity-select>\n            )}\n            {!this.editable && this.quantity > 1 && (\n              <span class=\"item__description\" part=\"static-quantity\">\n                {__('Qty:', 'surecart')} {this.quantity}\n              </span>\n            )}\n          </div>\n          <div class=\"item__suffix\" part=\"suffix\">\n            {this.removable ? <sc-icon exportparts=\"base:remove-icon__base\" class=\"item__remove\" name=\"x\" onClick={() => this.scRemove.emit()}></sc-icon> : <div></div>}\n            {this.renderPriceAndInterval()}\n          </div>\n        </div>\n        {(this.fees || []).map(fee => {\n          if (this.trialDurationDays && !this.setupFeeTrialEnabled && fee.fee_type === 'setup') return null;\n          return (\n            <sc-line-item>\n              <sc-format-number slot=\"price-description\" type=\"currency\" value={fee?.amount} currency={this.currency || 'usd'} />\n              <span slot=\"price-description\" class=\"fee__description\">\n                {fee?.description}\n              </span>\n            </sc-line-item>\n          );\n        })}\n      </div>\n    );\n  }\n}\n",":host {\n  --focus-ring: 0 0 0 var(--sc-focus-ring-width) var(--sc-focus-ring-color-primary);\n  --border-radius: var(--sc-quantity-border-radius, var(--sc-input-border-radius-small));\n  display: inline-block;\n}\n\n.input__control {\n  text-align: center;\n  line-height: 1;\n  border: none;\n  flex: 1;\n  max-width: 35px;\n  background-color: var(--sc-input-control-background-color, var(--sc-color-white));\n  color: var(--sc-input-control-color, var(--sc-color-black));\n  -moz-appearance:textfield;\n\n\n  &::-webkit-outer-spin-button,\n  &::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  &::-webkit-search-decoration,\n  &::-webkit-search-cancel-button,\n  &::-webkit-search-results-button,\n  &::-webkit-search-results-decoration {\n    -webkit-appearance: none;\n  }\n\n  &:-webkit-autofill,\n  &:-webkit-autofill:hover,\n  &:-webkit-autofill:focus,\n  &:-webkit-autofill:active {\n    box-shadow: 0 0 0 var(--sc-input-height-large) var(--sc-input-background-color-hover) inset !important;\n    -webkit-text-fill-color: var(--sc-input-color);\n  }\n\n  &::placeholder {\n    color: var(--sc-input-placeholder-color);\n    user-select: none;\n  }\n\n  &:focus {\n    outline: none;\n  }\n}\n\n.quantity--trigger {\n  cursor: pointer;\n  white-space: nowrap;\n}\n\n.quantity {\n  position: relative;\n  display: inline-block;\n  width: 100px;\n  height: var(--sc-quantity-control-height, var(--sc-input-height-small));\n  display: flex;\n  align-items: stretch;\n  font-family: var(--sc-input-font-family);\n  font-weight: var(--sc-input-font-weight);\n  letter-spacing: var(--sc-input-letter-spacing);\n  background-color: var(--sc-input-background-color);\n  border: var(--sc-input-border);\n  border-radius: var(--border-radius);\n  vertical-align: middle;\n  box-shadow: var(--sc-input-box-shadow);\n  transition: var(--sc-input-transition, var(--sc-transition-medium)) color, var(--sc-input-transition, var(--sc-transition-medium)) border, var(--sc-input-transition, var(--sc-transition-medium)) box-shadow;\n\n  &:hover:not(.quantity--disabled) {\n    background-color: var(--sc-input-background-color-hover);\n    border-color: var(--sc-input-border-color-hover);\n\n    .quantity__control {\n      color: var(--sc-input-color-hover);\n    }\n  }\n\n  &.quantity--focused:not(.quantity--disabled) {\n    background-color: var(--sc-input-background-color-focus);\n    border-color: var(--sc-input-border-color-focus);\n    box-shadow: var(--focus-ring);\n\n    .quantity__control {\n      color: var(--sc-input-color-focus);\n    }\n  }\n\n  &.quantity--disabled {\n    background-color: var(--sc-input-background-color-disabled);\n    border-color: var(--sc-input-border-color-disabled);\n    opacity: 0.5;\n    cursor: not-allowed;\n\n    .input__control {\n      color: var(--sc-input-color-disabled);\n\n      &::placeholder {\n        color: var(--sc-input-placeholder-color-disabled);\n      }\n    }\n  }\n}\n\n.button__decrease,\n.button__increase {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: auto;\n  top: 1px;\n  bottom: 1px;\n  width: 32px;\n  background: var(--sc-input-background-color);\n  color: var(--sc-input-color);\n  cursor: pointer;\n  font-size: 13px;\n  user-select: none;\n\n  &:hover:not(.button--disabled) {\n    .quantity__control {\n      color: var(--sc-input-color-hover);\n    }\n  }\n\n  &.button--disabled {\n    background-color: var(--sc-input-background-color-disabled);\n    border-color: var(--sc-input-border-color-disabled);\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n.button__decrease {\n  left: 1px;\n  border-radius: var(--border-radius) 0 0 var(--border-radius);\n  border-right: var(--sc-input-border);\n}\n.button__increase {\n  right: 1px;\n  border-radius: 0 var(--border-radius) var(--border-radius) 0;\n  border-left: var(--sc-input-border);\n}\n\n.quantity--is-rtl {\n  .button__decrease {\n    right: 1px;\n    border-left: var(--sc-input-border);\n    border-right: 0;\n  }\n  .button__increase {\n    left: 1px;\n    border-right: var(--sc-input-border);\n    border-left: 0;\n  }\n}\n","import { Component, h, Prop, Element, Event, EventEmitter } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { isRtl } from '../../../functions/page-align';\n\n/**\n * @part base - The elements base wrapper.\n * @part input - The input control.\n * @part minus - The minus control.\n * @part minus-icon - The minus icon.\n * @part plus - The plus control.\n * @part plus-icon - The plus icon.\n */\n@Component({\n  tag: 'sc-quantity-select',\n  styleUrl: 'sc-quantity-select.scss',\n  shadow: true,\n})\nexport class ScQuantitySelect {\n  @Element() el: HTMLScQuantitySelectElement;\n  private input: HTMLInputElement;\n\n  @Prop() clickEl?: HTMLElement;\n\n  @Prop() disabled: boolean;\n  @Prop() max: number = Infinity;\n  @Prop() min: number = 1;\n  @Prop({ mutable: true, reflect: true }) quantity: number = 0;\n\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** Inputs focus */\n  @Prop({ mutable: true, reflect: true }) hasFocus: boolean;\n\n  @Event({ cancelable: true }) scChange: EventEmitter<number>;\n\n  /** Emitted when the control receives input. */\n  @Event({ cancelable: true }) scInput: EventEmitter<number>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  componentWillLoad() {\n    if (!this.quantity) {\n      this.quantity = this.min;\n    }\n  }\n\n  decrease() {\n    if (this.disabled) return;\n    this.quantity = Math.max(this.quantity - 1, this.min);\n    this.scChange.emit(this.quantity);\n    this.scInput.emit(this.quantity);\n  }\n\n  increase() {\n    if (this.disabled) return;\n    this.quantity = Math.min(this.quantity + 1, this.max);\n    this.scChange.emit(this.quantity);\n    this.scInput.emit(this.quantity);\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.scBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.scFocus.emit();\n  }\n\n  handleChange() {\n    this.quantity = parseInt(this.input.value) > this.max ? this.max : parseInt(this.input.value);\n    this.scChange.emit(this.quantity);\n  }\n\n  handleInput() {\n    this.quantity = parseInt(this.input.value);\n    this.scInput.emit(this.quantity);\n  }\n\n  render() {\n    return (\n      <div\n        part=\"base\"\n        class={{\n          'quantity': true,\n          // States\n          'quantity--focused': this.hasFocus,\n          'quantity--disabled': this.disabled,\n          'quantity--is-rtl': isRtl(),\n        }}\n      >\n        <span\n          part=\"minus\"\n          role=\"button\"\n          aria-label={__('decrease number', 'surecart')}\n          class={{ 'button__decrease': true, 'button--disabled': this.quantity <= this.min && this.min > 1 }}\n          onClick={() => this.quantity > this.min && this.decrease()}\n        >\n          <sc-icon name=\"minus\" exportparts=\"base:minus__icon\"></sc-icon>\n        </span>\n\n        <input\n          part=\"input\"\n          class=\"input__control\"\n          ref={el => (this.input = el as HTMLInputElement)}\n          step=\"1\"\n          type=\"number\"\n          max={this.max}\n          min={this.min}\n          value={this.quantity}\n          autocomplete=\"off\"\n          tabindex=\"0\"\n          role=\"spinbutton\"\n          aria-valuemax={this.max}\n          aria-valuemin={this.min}\n          aria-valuenow={this.quantity}\n          aria-disabled={this.disabled}\n          onChange={() => this.handleChange()}\n          onInput={() => this.handleInput()}\n          onFocus={() => this.handleFocus()}\n          onBlur={() => this.handleBlur()}\n        />\n\n        <span\n          part=\"plus\"\n          role=\"button\"\n          aria-label={__('increase number', 'surecart')}\n          class={{ 'button__increase': true, 'button--disabled': this.quantity >= this.max }}\n          onClick={() => this.quantity < this.max && this.increase()}\n        >\n          <sc-icon name=\"plus\" exportparts=\"base:plus__icon\"></sc-icon>\n        </span>\n      </div>\n    );\n  }\n}\n"],"version":3}