{"file":"sc-cart-button.entry.js","mappings":";;;;;;AAAA,MAAM,eAAe,GAAG,kzBAAkzB;;MCa7zB,YAAY;;;gBAME,IAAI;iBAGJ,CAAC;;gBAMM,MAAM;+BAGC,IAAI;0BAGT,KAAK;;EAEvC,KAAK;IACH,OAAO,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;GAC5C;;EAGD,aAAa;;IACX,MAAM,KAAK,GAAG,MAAA,MAAA,IAAI,CAAC,KAAK,EAAE,0CAAE,UAAU,0CAAE,IAAI,CAAC;IAC7C,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,CAAC,KAAK,IAAI,EAAE,EAAE,OAAO,CAAC,IAAI;MACxB,KAAK,GAAG,KAAK,IAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,CAAA,CAAC;KAChC,CAAC,CAAC;IACH,OAAO,KAAK,CAAC;GACd;EAED,gBAAgB;IACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;;IAEjC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;MACnC,CAAC,CAAC,cAAc,EAAE,CAAC;MACnB,CAAC,CAAC,wBAAwB,EAAE,CAAC;MAC7BA,KAAO,CAAC,KAAK,CAAC,IAAI,GAAG,EAAE,GAAGA,KAAO,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,CAACA,KAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;MAC/E,OAAO,KAAK,CAAC;KACd,CAAC,CAAC;;IAGH,IAAI,CAAC,uBAAuB,EAAE,CAAC;IAC/BC,OAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC;GACjE;EAED,uBAAuB;IACrB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,CAAC,IAAI,CAAC,mBAAmB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,GAAG,MAAM,GAAG,IAAI,CAAC;GAC9F;EAED,MAAM;IACJ,QACE,WAAK,KAAK,EAAC,cAAc,EAAC,IAAI,EAAC,MAAM,IACnC,WAAK,KAAK,EAAC,eAAe,IACvB,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,MAC7C,YAAM,KAAK,EAAC,aAAa,EAAC,IAAI,EAAC,OAAO,IACnC,IAAI,CAAC,aAAa,EAAE,CAChB,CACR,EACD,WAAK,KAAK,EAAC,YAAY,IACrB,eAAQ,CACJ,CACF,CACF,EACN;GACH;;;;;;;","names":["uiStore","store"],"sources":["./src/components/ui/sc-cart-button/sc-cart-button.scss?tag=sc-cart-button&encapsulation=shadow","./src/components/ui/sc-cart-button/sc-cart-button.tsx"],"sourcesContent":[":host {\n  display: inline-block;\n  vertical-align: middle;\n  line-height: 1;\n}\n\n::slotted(*) {\n  display: block !important;\n  line-height: 1;\n}\n\n.cart {\n  &__button {\n    padding: 0 4px;\n    height: 100%;\n    display: grid;\n    align-items: center;\n  }\n\n  &__content {\n    position: relative;\n  }\n\n  &__count {\n    box-sizing: border-box;\n    position: absolute;\n    inset: -12px -16px auto auto;\n    text-align: center;\n    font-size: 10px;\n    font-weight: bold;\n    border-radius: var(--sc-cart-icon-counter-border-radius, 9999px);\n    color: var(--sc-cart-icon-counter-color, var(--sc-color-primary-text, var(--sc-color-white)));\n    background: var(--sc-cart-icon-counter-background, var(--sc-color-primary-500));\n    box-shadow: var(--sc-cart-icon-box-shadow, var(--sc-shadow-x-large));\n    padding: 2px 6px;\n    line-height: 14px;\n    min-width: 14px;\n    z-index: 1;\n  }\n\n  &__icon {\n    font-size: var(--sc-cart-icon-size, 1.1em);\n    cursor: pointer;\n\n    sc-icon {\n      display: block;\n    }\n  }\n}\n","import { Component, Element, h, Prop, State } from '@stencil/core';\nimport uiStore from '@store/ui';\nimport store, { getCheckout } from '@store/checkouts';\n\n/**\n * @part base - The elements base wrapper.\n * @part count - The icon base wrapper.\n */\n@Component({\n  tag: 'sc-cart-button',\n  styleUrl: 'sc-cart-button.scss',\n  shadow: true,\n})\nexport class ScCartButton {\n  private link: HTMLAnchorElement;\n  /** The cart element. */\n  @Element() el: HTMLScCartButtonElement;\n\n  /** Is this open or closed? */\n  @State() open: boolean = null;\n\n  /** The order count */\n  @State() count: number = 0;\n\n  /** The form id to use for the cart. */\n  @Prop({ reflect: true }) formId: string;\n\n  /** Are we in test or live mode. */\n  @Prop() mode: 'test' | 'live' = 'live';\n\n  /** Whether the cart icon is always shown when the cart is empty */\n  @Prop() cartMenuAlwaysShown: boolean = true;\n\n  /** Whether the cart count will be shown or not when the cart is empty */\n  @Prop() showEmptyCount: boolean = false;\n\n  order() {\n    return getCheckout(this.formId, this.mode);\n  }\n\n  /** Count the number of items in the cart. */\n  getItemsCount() {\n    const items = this.order()?.line_items?.data;\n    let count = 0;\n    (items || []).forEach(item => {\n      count = count + item?.quantity;\n    });\n    return count;\n  }\n\n  componentDidLoad() {\n    this.link = this.el.closest('a');\n    // this is to keep the structure that WordPress expects for theme styling.\n    this.link.addEventListener('click', e => {\n      e.preventDefault();\n      e.stopImmediatePropagation();\n      uiStore.state.cart = { ...uiStore.state.cart, open: !uiStore.state.cart.open };\n      return false;\n    });\n\n    // maybe hide the parent <a> if there are no items in the cart.\n    this.handleParentLinkDisplay();\n    store.onChange(this.mode, () => this.handleParentLinkDisplay());\n  }\n\n  handleParentLinkDisplay() {\n    this.link.style.display = !this.cartMenuAlwaysShown && !this.getItemsCount() ? 'none' : null;\n  }\n\n  render() {\n    return (\n      <div class=\"cart__button\" part=\"base\">\n        <div class=\"cart__content\">\n          {(this.showEmptyCount || !!this.getItemsCount()) && (\n            <span class=\"cart__count\" part=\"count\">\n              {this.getItemsCount()}\n            </span>\n          )}\n          <div class=\"cart__icon\">\n            <slot />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"],"version":3}