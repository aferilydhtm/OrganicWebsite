{"file":"sc-compact-address.sc-line-item-tax.sc-order-bump.sc-order-bumps.sc-order-shipping-address.sc-order-tax-id-input.entry.js","mappings":"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","names":["checkoutState"],"sources":["./src/components/ui/sc-compact-address/sc-compact-address.scss?tag=sc-compact-address&encapsulation=shadow","./src/components/ui/sc-compact-address/sc-compact-address.tsx","./src/components/controllers/checkout-form/line-item-tax/sc-line-item-tax.scss?tag=sc-line-item-tax&encapsulation=shadow","./src/components/controllers/checkout-form/line-item-tax/sc-line-item-tax.tsx","./src/components/controllers/checkout-form/sc-order-bump/sc-order-bump.scss?tag=sc-order-bump&encapsulation=shadow","./src/components/controllers/checkout-form/sc-order-bump/sc-order-bump.tsx","./src/components/controllers/checkout-form/sc-order-bumps/sc-order-bumps.scss?tag=sc-order-bumps&encapsulation=shadow","./src/components/controllers/checkout-form/sc-order-bumps/sc-order-bumps.tsx","./src/components/controllers/checkout-form/order-shipping-address/sc-order-shipping-address.scss?tag=sc-order-shipping-address&encapsulation=shadow","./src/components/controllers/checkout-form/order-shipping-address/sc-order-shipping-address.tsx","./src/components/controllers/checkout-form/order-tax-id-input/sc-order-tax-id-input.css?tag=sc-order-tax-id-input&encapsulation=shadow","./src/components/controllers/checkout-form/order-tax-id-input/sc-order-tax-id-input.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.sc-address {\n  display: block;\n  position: relative;\n\n  [hidden] {\n    display: none;\n  }\n\n  &--loading {\n    min-height: 70px;\n\n    sc-skeleton {\n      display: block;\n      margin-bottom: 1em;\n    }\n  }\n\n\n  &__control {\n    display: block;\n\n    > * {\n      margin-bottom: -1px;\n    }\n  }\n\n  &__columns {\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    flex-wrap: wrap;\n    justify-content: space-between;\n\n    > * {\n      flex: 1;\n      width: 50%;\n      margin-left: -1px;\n\n      &:first-child {\n        margin-left: 0;\n      }\n    }\n  }\n}\n","import { Component, Element, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport { Address } from '../../../types';\nimport { countryChoices, hasState } from '../../../functions/address';\nimport { __ } from '@wordpress/i18n';\nimport { reportChildrenValidity } from '../../../functions/form-data';\n\n/**\n * @part base - The elements base wrapper.\n * @part input__base - The inputs base element.\n * @part select__base - The select boxes base element.\n * @part input - The html input element.\n * @part form-control - The form control wrapper.\n * @part label - The input label.\n * @part help-text - Help text that describes how to use the input.\n * @part trigger - The select box trigger.\n * @part panel - The select box panel.\n * @part caret - The select box caret.\n * @part search__base - The select search base.\n * @part search__input - The select search input.\n * @part search__form-control - The select search form control.\n * @part menu__base - The select menu base.\n * @part spinner__base  - The select spinner base.\n * @part empty - The select empty message.\n * @part block-ui - The block ui base component.\n * @part block-ui__content - The block ui content (spinner).\n */\n@Component({\n  tag: 'sc-compact-address',\n  styleUrl: 'sc-compact-address.scss',\n  shadow: true,\n})\nexport class ScCompactAddress {\n  @Element() el: HTMLScCompactAddressElement;\n\n  /** The address. */\n  @Prop({ mutable: true }) address: Partial<Address> = {\n    country: null,\n    city: null,\n    line_1: null,\n    line_2: null,\n    postal_code: null,\n    state: null,\n  };\n\n  @Prop() names: Partial<Address> = {\n    country: 'shipping_country',\n    city: 'shipping_city',\n    line_1: 'shipping_line_1',\n    line_2: 'shipping_line_2',\n    postal_code: 'shipping_postal_code',\n    state: 'shipping_state',\n  };\n\n  /**Placeholders */\n  @Prop() placeholders: Partial<Address> = {\n    country: '',\n    postal_code: '',\n    state: '',\n  };\n\n  /** Label for the address */\n  @Prop() label: string = __('Country or region', 'surecart');\n\n  /** Is this required? */\n  @Prop() required: boolean;\n\n  /** Is this loading */\n  @Prop() loading: boolean;\n\n  /** Address change event. */\n  @Event() scChangeAddress: EventEmitter<Partial<Address>>;\n\n  /** Address input event. */\n  @Event() scInputAddress: EventEmitter<Partial<Address>>;\n\n  /** Holds our country choices. */\n  @State() countryChoices: Array<{ value: string; label: string }> = countryChoices;\n\n  /** Holds the regions for a given country. */\n  @State() regions: Array<{ value: string; label: string }>;\n\n  @State() showState: boolean;\n  @State() showPostal: boolean;\n\n  /** When the state changes, we want to update city and postal fields. */\n  @Watch('address')\n  handleAddressChange() {\n    if (!this.address.country) return;\n    this.setRegions();\n    this.showState = ['US', 'CA'].includes(this.address.country);\n    this.showPostal = ['US'].includes(this.address.country);\n    this.scChangeAddress.emit(this.address);\n    this.scInputAddress.emit(this.address);\n  }\n\n  updateAddress(address: Partial<Address>) {\n    this.address = { ...this.address, ...address };\n  }\n\n  handleAddressInput(address: Partial<Address>) {\n    this.scInputAddress.emit({ ...this.address, ...address });\n  }\n\n  clearAddress() {\n    this.address = {\n      country: null,\n      line_1: null,\n      line_2: null,\n      city: null,\n      postal_code: null,\n      state: null,\n    };\n  }\n\n  /** Set the regions based on the country. */\n  setRegions() {\n    if (hasState(this.address.country)) {\n      import('../address/countries.json').then(module => {\n        this.regions = module?.[this.address.country] as Array<{ value: string; label: string }>;\n      });\n    } else {\n      this.regions = [];\n    }\n  }\n\n  componentWillLoad() {\n    this.handleAddressChange();\n    const country = this.countryChoices.find(country => country.value === this.address.country)?.value;\n    if (country) {\n      this.updateAddress({ country });\n    }\n  }\n\n  @Method()\n  async reportValidity() {\n    return reportChildrenValidity(this.el);\n  }\n\n  getStatePlaceholder() {\n    if (this.placeholders?.state) return this.placeholders.state;\n\n    if (this.address?.country === 'US') return __('State', 'surecart');\n\n    return __('Province/Region', 'surecart');\n  }\n\n  render() {\n    return (\n      <div class=\"sc-address\" part=\"base\">\n        <sc-form-control exportparts=\"label, help-text, form-control\" label={this.label} class=\"sc-address__control\" part=\"control\" required={this.required}>\n          <sc-select\n            exportparts=\"base:select__base, input, form-control, label, help-text, trigger, panel, caret, search__base, search__input, search__form-control, menu__base, spinner__base, empty\"\n            value={this.address?.country}\n            onScChange={(e: any) => {\n              this.clearAddress();\n              this.updateAddress({ country: e.target.value || null });\n            }}\n            choices={this.countryChoices}\n            autocomplete={'country-name'}\n            placeholder={this.placeholders?.country || __('Select Your Country', 'surecart')}\n            name={this.names.country}\n            search\n            unselect={false}\n            squared-bottom={this.showState || this.showPostal}\n            required={this.required}\n          />\n\n          <div class=\"sc-address__columns\">\n            {this.showState && (\n              <sc-select\n                exportparts=\"base:select__base, input, form-control, label, help-text, trigger, panel, caret, search__base, search__input, search__form-control, menu__base, spinner__base, empty\"\n                placeholder={this.getStatePlaceholder()}\n                name={this.names.state}\n                autocomplete={'address-level1'}\n                value={this?.address?.state}\n                onScChange={(e: any) => this.updateAddress({ state: e.target.value || null })}\n                choices={this.regions}\n                required={this.required}\n                search\n                squared-top\n                unselect={false}\n                squared-right={this.showPostal}\n              />\n            )}\n            {this.showPostal && (\n              <sc-input\n                exportparts=\"base:input__base, input, form-control, label, help-text\"\n                placeholder={this.placeholders?.postal_code || __('Postal Code/Zip', 'surecart')}\n                name={this.names.postal_code}\n                onScChange={(e: any) => this.updateAddress({ postal_code: e.target.value || null })}\n                onScInput={(e: any) => this.handleAddressInput({ name: e.target.value || null })}\n                autocomplete={'postal-code'}\n                required={this.required}\n                value={this?.address?.postal_code}\n                squared-top\n                maxlength={5}\n                squared-left={this.showState}\n              />\n            )}\n          </div>\n        </sc-form-control>\n        {this.loading && <sc-block-ui exportparts=\"base:block-ui, content:block-ui__content\"></sc-block-ui>}\n      </div>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n","import { Component, Prop, h, Fragment } from '@stencil/core';\nimport { sprintf, __ } from '@wordpress/i18n';\nimport { openWormhole } from 'stencil-wormhole';\nimport { Checkout } from '../../../../types';\n\n@Component({\n  tag: 'sc-line-item-tax',\n  styleUrl: 'sc-line-item-tax.scss',\n  shadow: true,\n})\nexport class ScLineItemTax {\n  @Prop() order: Checkout;\n  @Prop() loading: boolean;\n\n  renderLabel() {\n    let label = sprintf(__('Estimated %s', 'surecart'), this?.order?.tax_label || '');\n\n    if (this?.order?.tax_status === 'calculated') {\n      label = this.order?.tax_label ||'';\n    }\n\n\n    return (\n      <Fragment>\n        {`${__('Tax:', 'surecart')} ${label}`}\n        {this.renderPercent()}\n      </Fragment>\n    );\n  }\n\n  renderPercent() {\n    if (this.order?.tax_percent) {\n      return (\n        <Fragment>\n          {'('}\n          {this.order.tax_percent}%{')'}\n        </Fragment>\n      );\n    }\n    return '';\n  }\n\n  render() {\n    // hide if tax is 0\n    if (!this?.order?.tax_amount) {\n      return null;\n    }\n\n    return (\n      <sc-line-item>\n        <span slot=\"description\">{this.renderLabel()}</span>\n\n        {this.order?.tax_exclusive_amount && (\n          <span slot=\"price\">\n            <sc-format-number type=\"currency\" currency={this?.order?.currency || 'usd'} value={this?.order?.tax_exclusive_amount} />\n          </span>\n        )}\n\n        {this.order?.tax_inclusive_amount && (\n          <span slot=\"price-description\">\n            {'('}\n            <sc-format-number type=\"currency\" currency={this?.order?.currency || 'usd'} value={this?.order?.tax_inclusive_amount} /> {__('included', 'surecart')}\n            {')'}\n          </span>\n        )}\n      </sc-line-item>\n    );\n  }\n}\n\nopenWormhole(ScLineItemTax, ['order', 'loading'], false);\n",":host {\n  display: block;\n}\n\n.bump {\n  display: grid;\n  gap: 1em;\n\n  &__text {\n    display: grid;\n    gap: 0.25em;\n  }\n  &__tag {\n    background: var(--sc-color-primary-500);\n    color: var(--sc-color-white);\n    border-radius: var(--sc-input-border-radius-medium);\n    padding: var(--sc-spacing-x-small);\n    font-size: var(--sc-font-size-x-small);\n  }\n\n  &__product {\n    display: flex;\n    align-items: center;\n    gap: var(--sc-choice-padding, 1.3em 1.1em);\n    line-height: var(--sc-line-height-dense);\n  }\n\n  &__product-title {\n    font-weight: var(--sc-font-weight-semibold);\n  }\n\n  &__product-description {\n    color: var(--sc-input-label-color);\n  }\n\n  &__image {\n    width: var(--sc-product-line-item-image-size, 4em);\n    height: var(--sc-product-line-item-image-size, 4em);\n    flex: 0 0 var(--sc-product-line-item-image-size, 4em);\n    object-fit: cover;\n    border-radius: 4px;\n    border: 1px solid var(--sc-color-gray-200);\n    display: block;\n    box-shadow: var(--sc-input-box-shadow);\n  }\n\n  &__price {\n    &--has-discount .bump__original-price {\n      text-decoration: line-through;\n      color: var(--sc-color-gray-500);\n      font-size: var(--sc-font-size-small);\n    }\n    .bump__new-price {\n      font-size: var(--sc-font-size-large);\n      color: var(--sc-color-gray-700);\n    }\n    .bump__interval {\n      color: var(--sc-color-gray-500);\n    }\n  }\n\n  &__amount {\n    display: flex;\n    align-items: center;\n    gap: var(--sc-spacing-x-small);\n    flex-wrap: wrap;\n    margin-top: var(--sc-spacing-xx-small);\n  }\n}\n","import { Component, Event, EventEmitter, h, Prop } from '@stencil/core';\nimport { sprintf, __ } from '@wordpress/i18n';\nimport { isBumpInOrder } from '../../../../functions/line-items';\nimport { intervalString } from '../../../../functions/price';\nimport { sizeImage } from '../../../../functions/media';\n\nimport { Bump, Checkout, LineItemData, Price, Product } from '../../../../types';\n\n@Component({\n  tag: 'sc-order-bump',\n  styleUrl: 'sc-order-bump.scss',\n  shadow: true,\n})\nexport class ScOrderBump {\n  /** The bump */\n  @Prop() bump: Bump;\n\n  /** The checkout */\n  @Prop() checkout: Checkout;\n\n  /** Should we show the controls */\n  @Prop({ reflect: true }) showControl: boolean;\n\n  @Prop() cdnRoot: string = window.scData?.cdn_root;\n\n  /** Add line item event */\n  @Event() scAddLineItem: EventEmitter<LineItemData>;\n\n  /** Remove line item event */\n  @Event() scRemoveLineItem: EventEmitter<LineItemData>;\n\n  /** Update the line item. */\n  updateLineItem(add: boolean) {\n    const price_id = (this.bump.price as Price)?.id || (this.bump?.price as string);\n    if (add) {\n      this.scAddLineItem.emit({\n        bump: this.bump?.id,\n        price_id,\n        quantity: 1,\n      });\n    } else {\n      this.scRemoveLineItem.emit({\n        price_id,\n        quantity: 1,\n      });\n    }\n  }\n\n  newPrice() {\n    let amount = null;\n    let initialAmount = (this.bump?.price as Price)?.amount || 0;\n\n    if (this.bump?.amount_off) {\n      amount = Math.max(0, initialAmount - this.bump?.amount_off);\n    }\n    if (this.bump?.percent_off) {\n      const off = initialAmount * (this.bump?.percent_off / 100);\n      amount = Math.max(0, initialAmount - off);\n    }\n\n    return amount;\n  }\n\n  renderInterval() {\n    const interval = intervalString(this.bump?.price as Price, { labels: { interval: '/', period: __('for', 'surecart') } });\n    if (!interval.trim().length) return null;\n    return <span class=\"bump__interval\">{interval}</span>;\n  }\n\n  renderPrice() {\n    return (\n      <div slot=\"description\" class={{ 'bump__price': true, 'bump__price--has-discount': !!this.bump?.percent_off || !!this.bump?.amount_off }} part=\"price\">\n        <sc-format-number\n          type=\"currency\"\n          class=\"bump__original-price\"\n          value={(this.bump?.price as Price)?.amount}\n          currency={(this.bump?.price as Price)?.currency}\n        ></sc-format-number>{' '}\n        {this.newPrice() === 0 && __('Free', 'surecart')}\n        {this.newPrice() !== null && this.newPrice() > 0 && (\n          <sc-format-number type=\"currency\" class=\"bump__new-price\" value={this.newPrice()} currency={(this.bump?.price as Price).currency} />\n        )}\n        {this.renderInterval()}\n      </div>\n    );\n  }\n\n  renderDiscount() {\n    if (!!this.bump?.amount_off) {\n      return (\n        <div class=\"bump__tag\">\n          {__('Save', 'surecart')} <sc-format-number type=\"currency\" value={-this.bump?.amount_off} currency={(this.bump?.price as Price).currency}></sc-format-number>\n        </div>\n      );\n    }\n\n    if (!!this.bump?.percent_off) {\n      return <div class=\"bump__tag\">{sprintf(__('Save %s%%', 'surecart'), this.bump?.percent_off)}</div>;\n    }\n  }\n\n  render() {\n    const product = (this.bump?.price as Price)?.product as Product;\n\n    return (\n      <sc-choice\n        value={this.bump?.id}\n        type=\"checkbox\"\n        showControl={this.showControl}\n        checked={isBumpInOrder(this.bump, this.checkout)}\n        onScChange={e => this.updateLineItem(e.target.checked)}\n        exportparts=\"base, control, checked-icon, title\"\n      >\n        <div part=\"base-content\" class=\"bump\">\n          <div class=\"bump__text\">\n            <div class=\"bump__title\">{this.bump?.metadata?.cta || this.bump?.name || product?.name}</div>\n            <div class=\"bump__amount\">\n              {this.renderPrice()} {this.renderDiscount()}\n            </div>\n          </div>\n        </div>\n\n        {this.bump?.metadata?.description && (\n          <div slot=\"footer\">\n            <sc-divider style={{ '--spacing': 'var(--sc-spacing-medium)' }}></sc-divider>\n            <div class=\"bump__product\">\n              {!!product?.image_url && <img src={sizeImage(product?.image_url, 130)} class=\"bump__image\" />}\n              <div class=\"bump__product-text\">\n                {!!this.bump?.metadata?.cta && <div class=\"bump__product-title\">{this.bump.name || product?.name}</div>}\n                {!!this.bump?.metadata?.description && <div class=\"bump__product-description\">{this.bump?.metadata?.description}</div>}\n              </div>\n            </div>\n          </div>\n        )}\n      </sc-choice>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n\n.bumps__list {\n  display: grid;\n  gap: 10px;\n}\n","import { Component, h, Prop } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { openWormhole } from 'stencil-wormhole';\nimport { Bump, Checkout } from '../../../../types';\n\n@Component({\n  tag: 'sc-order-bumps',\n  styleUrl: 'sc-order-bumps.scss',\n  shadow: true,\n})\nexport class ScOrderBumps {\n  @Prop() label: string;\n  @Prop() showControl: boolean;\n  @Prop() help: string;\n  @Prop() bumps: Bump[];\n  @Prop() checkout: Checkout;\n\n  render() {\n    if (!this?.bumps?.length) {\n      return null;\n    }\n\n    return (\n      <sc-form-control label={this.label || __('Recommended', 'surecart')} help={this.help}>\n        <div class=\"bumps__list\">\n          {(this.bumps || []).map(bump => (\n            <sc-order-bump key={bump?.id} showControl={this.showControl} bump={bump} checkout={this.checkout}></sc-order-bump>\n          ))}\n        </div>\n      </sc-form-control>\n    );\n  }\n}\n\nopenWormhole(ScOrderBumps, ['bumps', 'checkout'], false);\n",":host {\n  display: block;\n}\n\n.sc-order-shipping {\n  &__loading {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5em;\n  }\n}\n","import { Component, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport { state as checkoutState } from '@store/checkout';\nimport { lockCheckout, unLockCheckout } from '@store/checkout/mutations';\nimport { __ } from '@wordpress/i18n';\nimport { createOrUpdateCheckout } from '../../../../services/session';\nimport { openWormhole } from 'stencil-wormhole';\n\nimport { Address, Checkout, TaxStatus } from '../../../../types';\n\n@Component({\n  tag: 'sc-order-shipping-address',\n  styleUrl: 'sc-order-shipping-address.scss',\n  shadow: true,\n})\nexport class ScOrderShippingAddress {\n  private input: HTMLScAddressElement | HTMLScCompactAddressElement;\n\n  /** Label for the field. */\n  @Prop() label: string;\n\n  /** Is this required (defaults to false) */\n  @Prop({ mutable: true }) required: boolean = false;\n\n  /** Is this loading. */\n  @Prop() loading: boolean;\n\n  /** Holds the customer's billing address */\n  @Prop() shippingAddress: Address;\n\n  /** Tax status of the order */\n  @Prop() taxStatus: TaxStatus;\n\n  /** Tax enabled status of the order */\n  @Prop() taxEnabled: boolean;\n\n  /** Is shipping enabled for this order? */\n  @Prop() shippingEnabled: boolean;\n\n  /** Show the full address */\n  @Prop() full: boolean;\n\n  /** Show the name field. */\n  @Prop() showName: boolean;\n\n  /** Show the placeholder fields. */\n  @Prop() namePlaceholder: string = __('Name or Company Name', 'surecart');\n  @Prop() countryPlaceholder: string = __('Country', 'surecart');\n  @Prop() cityPlaceholder: string = __('City', 'surecart');\n  @Prop() line1Placeholder: string = __('Address', 'surecart');\n  @Prop() line2Placeholder: string = __('Address Line 2', 'surecart');\n  @Prop() postalCodePlaceholder: string = __('Postal Code/Zip', 'surecart');\n  @Prop() statePlaceholder: string = __('State/Province/Region', 'surecart');\n\n  /** Default country for address */\n  @Prop() defaultCountry: string;\n\n  /** Placeholder values. */\n  @Prop() placeholders: Partial<Address> = {\n    name: __('Name or Company Name', 'surecart'),\n    country: __('Country', 'surecart'),\n    city: __('City', 'surecart'),\n    line_1: __('Address', 'surecart'),\n    line_2: __('Address Line 2', 'surecart'),\n    postal_code: __('Postal Code/Zip', 'surecart'),\n    state: __('State/Province/Region', 'surecart'),\n  };\n\n  /** Make a request to update the order. */\n  @Event() scUpdateOrder: EventEmitter<{\n    data: Partial<Checkout>;\n    options?: { silent?: boolean };\n  }>;\n\n  /** Address to pass to the component */\n  @State() address: Partial<Address> = {\n    country: null,\n    city: null,\n    line_1: null,\n    line_2: null,\n    postal_code: null,\n    state: null,\n  };\n\n  /** When the shipping address changes, we want to use that instead of what's entered, if we have empty fields. */\n  @Watch('shippingAddress')\n  handleCustomerAddressChange(val, old) {\n    if (val?.id && !old) {\n      this.address = { ...this.address, ...val };\n    }\n  }\n\n  async updateAddressState(address: Partial<Address>) {\n    if (JSON.stringify(address) === JSON.stringify(this.address)) return; // no change, don't update.\n    this.address = address;\n    try {\n      lockCheckout('shipping-address');\n      checkoutState.checkout = (await createOrUpdateCheckout({\n        id: checkoutState.checkout.id,\n        data: {\n          shipping_address: this.address as Address,\n        },\n      })) as Checkout;\n    } catch (e) {\n      console.error(e);\n    } finally {\n      unLockCheckout('shipping-address');\n    }\n  }\n\n  @Method()\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  componentWillLoad() {\n    if (this.defaultCountry && !this.address.country) {\n      this.address.country = this.defaultCountry;\n    }\n\n    this.handleRequirementChange();\n  }\n\n  @Watch('shippingEnabled')\n  @Watch('taxEnabled')\n  handleRequirementChange() {\n    if (this.shippingEnabled || this.taxEnabled) {\n      this.required = true;\n    }\n  }\n\n  render() {\n    if (this.shippingEnabled || this.full) {\n      return (\n        <sc-address\n          exportparts=\"label, help-text, form-control, input__base, select__base, columns, search__base, menu__base\"\n          ref={el => (this.input = el as any)}\n          label={this.label || __('Shipping Address', 'surecart')}\n          placeholders={{\n            name: this.namePlaceholder,\n            country: this.countryPlaceholder,\n            city: this.cityPlaceholder,\n            line_1: this.line1Placeholder,\n            line_2: this.line2Placeholder,\n            postal_code: this.postalCodePlaceholder,\n            state: this.statePlaceholder,\n          }}\n          required={this.required}\n          loading={this.loading}\n          address={this.address}\n          show-name={this.showName}\n          onScChangeAddress={e => this.updateAddressState(e.detail)}\n        ></sc-address>\n      );\n    }\n    return (\n      <sc-compact-address\n        ref={el => (this.input = el as any)}\n        required={this.required}\n        loading={this.loading}\n        address={this.address}\n        placeholders={{\n          name: this.namePlaceholder,\n          country: this.countryPlaceholder,\n          city: this.cityPlaceholder,\n          line_1: this.line1Placeholder,\n          line_2: this.line2Placeholder,\n          postal_code: this.postalCodePlaceholder,\n          state: this.statePlaceholder,\n        }}\n        label={this.label}\n        onScChangeAddress={e => this.updateAddressState(e.detail)}\n      ></sc-compact-address>\n    );\n  }\n}\n\nopenWormhole(ScOrderShippingAddress, ['shippingAddress', 'loading', 'taxStatus', 'taxEnabled', 'shippingEnabled'], false);\n",":host {\n  display: block;\n}\n","import { Component, Event, EventEmitter, h, Prop } from '@stencil/core';\nimport { state as checkoutState } from '@store/checkout';\nimport { lockCheckout, unLockCheckout } from '@store/checkout/mutations';\nimport { __ } from '@wordpress/i18n';\nimport { createOrUpdateCheckout } from '../../../../services/session';\nimport { openWormhole } from 'stencil-wormhole';\n\nimport { Address, Checkout, ResponseError, TaxIdentifier, TaxProtocol } from '../../../../types';\n\n@Component({\n  tag: 'sc-order-tax-id-input',\n  styleUrl: 'sc-order-tax-id-input.css',\n  shadow: true,\n})\nexport class ScOrderTaxIdInput {\n  /** The order */\n  @Prop() order: Partial<Checkout>;\n\n  /** Force show the field. */\n  @Prop() show: boolean = false;\n\n  /** Tax identifier */\n  @Prop() taxIdentifier: TaxIdentifier;\n\n  /** The tax protocol. */\n  @Prop() taxProtocol: TaxProtocol;\n\n  /** Is this busy */\n  @Prop() busy: boolean = false;\n\n  /** Other zones label */\n  @Prop() otherLabel: string;\n\n  /** GST zone label */\n  @Prop() caGstLabel: string;\n\n  /** AU zone label */\n  @Prop() auAbnLabel: string;\n\n  /** UK zone label */\n  @Prop() gbVatLabel: string;\n\n  /** EU zone label */\n  @Prop() euVatLabel: string;\n\n  /** Make a request to update the order. */\n  @Event() scUpdateOrder: EventEmitter<{\n    data: Partial<Checkout>;\n    options?: { silent?: boolean };\n  }>;\n\n  /** Error event */\n  @Event() scError: EventEmitter<ResponseError>;\n\n  getStatus() {\n    if (this.taxIdentifier?.number_type !== 'eu_vat') {\n      return 'unknown';\n    }\n    if (this.taxProtocol?.eu_vat_unverified_behavior === 'apply_reverse_charge') {\n      return 'unknown';\n    }\n    return this.taxIdentifier?.eu_vat_verified ? 'valid' : 'invalid';\n  }\n\n  async maybeUpdateOrder(tax_identifier) {\n    try {\n      lockCheckout('tax_identifier');\n      checkoutState.checkout = (await createOrUpdateCheckout({\n        id: checkoutState.checkout.id,\n        data: { tax_identifier },\n      })) as Checkout;\n    } catch (e) {\n      console.error(e);\n      this.scError.emit(e);\n    } finally {\n      unLockCheckout('tax_identifier');\n    }\n  }\n\n  render() {\n    return (\n      <sc-tax-id-input\n        show={this.show}\n        number={this.order?.tax_identifier?.number}\n        type={this.order?.tax_identifier?.number_type}\n        country={(this?.order?.shipping_address as Address)?.country}\n        status={this.getStatus()}\n        loading={this.busy}\n        onScChange={e => {\n          e.stopImmediatePropagation();\n          this.maybeUpdateOrder(e.detail);\n        }}\n        otherLabel={this.otherLabel}\n        caGstLabel={this.caGstLabel}\n        auAbnLabel={this.auAbnLabel}\n        gbVatLabel={this.gbVatLabel}\n        euVatLabel={this.euVatLabel}\n      ></sc-tax-id-input>\n    );\n  }\n}\n\nopenWormhole(ScOrderTaxIdInput, ['draft', 'order', 'tax_status', 'taxIdentifier', 'taxProtocol', 'busy'], false);\n"],"version":3}