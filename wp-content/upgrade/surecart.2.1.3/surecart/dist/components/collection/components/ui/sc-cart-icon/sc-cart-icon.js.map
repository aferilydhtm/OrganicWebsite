{"version":3,"file":"sc-cart-icon.js","sourceRoot":"","sources":["../../../../src/components/ui/sc-cart-icon/sc-cart-icon.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACnD,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAC5C,OAAO,OAAO,MAAM,WAAW,CAAC;AAEhC;;;;GAIG;AAMH,MAAM,OAAO,UAAU;;gBAEE,cAAc;iBAGb,CAAC;;gBAMO,MAAM;;EAEtC,KAAK;IACH,OAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;EAC1C,CAAC;EAED,6CAA6C;EAC7C,aAAa;;IACX,MAAM,KAAK,GAAG,MAAA,MAAA,IAAI,CAAC,KAAK,EAAE,0CAAE,UAAU,0CAAE,IAAI,CAAC;IAC7C,IAAI,KAAK,GAAG,CAAC,CAAC;IACd,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;MAC3B,KAAK,GAAG,KAAK,IAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,CAAA,CAAC;IACjC,CAAC,CAAC,CAAC;IACH,OAAO,KAAK,CAAC;EACf,CAAC;EAED,MAAM;IACJ,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,EAAE;MACjB,OAAO,IAAI,CAAC;KACb;IACD,OAAO,CACL,WAAK,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,IAAI,EAAC,MAAM,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE,GAAG,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,CAAC;MAC1I,WAAK,KAAK,EAAC,iBAAiB,EAAC,IAAI,EAAC,WAAW;QAC3C,WAAK,KAAK,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,IAAG,IAAI,CAAC,aAAa,EAAE,CAAO;QACjE;UACE,eAAS,WAAW,EAAC,iBAAiB,EAAC,IAAI,EAAE,IAAI,CAAC,IAAI,GAAY,CAC7D,CACH,CACF,CACP,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF","sourcesContent":["import { Component, h, Prop } from '@stencil/core';\nimport { getOrder } from '@store/checkouts';\nimport uiStore from '@store/ui';\n\n/**\n * @part base - The elements base wrapper.\n * @part container - The container.\n * @part icon__base - The icon base wrapper.\n */\n@Component({\n  tag: 'sc-cart-icon',\n  styleUrl: 'sc-cart-icon.scss',\n  shadow: true,\n})\nexport class ScCartIcon {\n  /** The icon to show. */\n  @Prop() icon: string = 'shopping-bag';\n\n  /** The count to show in the cart icon. */\n  @Prop() count: number = 0;\n\n  /** The form id to use for the cart. */\n  @Prop({ reflect: true }) formId: string;\n\n  /** Are we in test or live mode. */\n  @Prop() mode: 'test' | 'live' = 'live';\n\n  order() {\n    return getOrder(this.formId, this.mode);\n  }\n\n  /** Count the number of items in the cart. */\n  getItemsCount() {\n    const items = this.order()?.line_items?.data;\n    let count = 0;\n    (items || []).forEach(item => {\n      count = count + item?.quantity;\n    });\n    return count;\n  }\n\n  render() {\n    if (!this.order()) {\n      return null;\n    }\n    return (\n      <div class={{ cart: true }} part=\"base\" onClick={() => uiStore.set('cart', { ...uiStore.state.cart, ...{ open: !uiStore.state.cart.open } })}>\n        <div class=\"cart__container\" part=\"container\">\n          <div class={{ cart__counter: true }}>{this.getItemsCount()}</div>\n          <slot>\n            <sc-icon exportparts=\"base:icon__base\" name={this.icon}></sc-icon>\n          </slot>\n        </div>\n      </div>\n    );\n  }\n}\n"]}