{"version":3,"file":"sc-order-password.js","sourceRoot":"","sources":["../../../../../src/components/controllers/checkout-form/order-password/sc-order-password.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACjE,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,EAAE,EAAE,EAAE,MAAM,iBAAiB,CAAC;AAOrC,MAAM,OAAO,eAAe;;;gBAOoC,QAAQ;iBAGrC,EAAE;gBAGH,KAAK;;qBAMR,IAAI;gBAGV,EAAE;;oBAMoB,KAAK;oBAGL,KAAK;oBAGd,KAAK;;;wBASD,KAAK;;;;4BAYD,IAAI;;EAGhD,KAAK,CAAC,cAAc;;IAClB,IAAI,IAAI,CAAC,QAAQ;MAAE,OAAO,IAAI,CAAC;IAE/B,MAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,iBAAiB,mDAAG,EAAE,CAAC,CAAC;IACpC,MAAA,MAAA,IAAI,CAAC,YAAY,0CAAE,iBAAiB,mDAAG,EAAE,CAAC,CAAC;IAE3C,2BAA2B;IAC3B,IAAI,IAAI,CAAC,YAAY,EAAE;MACrB,IAAI,CAAA,MAAA,IAAI,CAAC,YAAY,0CAAE,KAAK,KAAI,CAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,KAAK,OAAK,MAAA,IAAI,CAAC,YAAY,0CAAE,KAAK,CAAA,EAAE;QAC9E,IAAI,CAAC,YAAY,CAAC,iBAAiB,CAAC,EAAE,CAAC,0BAA0B,EAAE,UAAU,CAAC,CAAC,CAAC;OACjF;KACF;IAED,IAAI,IAAI,CAAC,gBAAgB,EAAE;MACzB,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAA,IAAI,CAAC,KAAK,0CAAE,KAAK,CAAC,CAAC;MAC/D,IAAI,CAAC,aAAa,EAAE;QAClB,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,EAAE,CAAC,2EAA2E,EAAE,UAAU,CAAC,CAAC,CAAC;OAC3H;KACF;IAED,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC;IAChD,IAAI,CAAC,KAAK,EAAE;MACV,OAAO,KAAK,CAAC;KACd;IAED,IAAI,IAAI,CAAC,YAAY,EAAE;MACrB,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,EAAE,CAAC;KAC3C;IAED,OAAO,KAAK,CAAC;EACf,CAAC;EAED,gBAAgB,CAAC,QAAgB;IAC/B,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,4BAA4B,CAAC,CAAC;IACvD,IAAI,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;MAAE,OAAO,IAAI,CAAC;IACtC,OAAO,KAAK,CAAC;EACf,CAAC;EAED,MAAM;;IACJ,IAAI,IAAI,CAAC,QAAQ,EAAE;MACjB,OAAO,EAAC,IAAI,IAAC,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,GAAS,CAAC;KAClD;IAED,0BAA0B;IAC1B,sDAAsD;IACtD,IAAI;IAEJ,OAAO,CACL,WAAK,KAAK,EAAC,UAAU;MACnB,gBACE,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,GAAG,EAAwB,CAAC,EAClD,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,WAAW,EAAE,IAAI,CAAC,WAAW,EAC7B,SAAS,EAAE,IAAI,CAAC,SAAS,EACzB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EACtC,IAAI,EAAC,UAAU,EACf,IAAI,EAAC,UAAU,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,GACb;MACX,IAAI,CAAC,YAAY,IAAI,CACpB,gBACE,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,GAAG,EAAwB,CAAC,EACzD,KAAK,EAAE,MAAA,IAAI,CAAC,iBAAiB,mCAAI,EAAE,CAAC,kBAAkB,EAAE,UAAU,CAAC,EACnE,IAAI,EAAE,IAAI,CAAC,gBAAgB,EAC3B,WAAW,EAAE,IAAI,CAAC,uBAAuB,EACzC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EACtC,IAAI,EAAC,UAAU,EACf,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,QAAQ,EAAE,IAAI,CAAC,QAAQ,EACvB,QAAQ,EAAE,IAAI,CAAC,QAAQ,GACb,CACb,CACG,CACP,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AAED,YAAY,CAAC,eAAe,EAAE,CAAC,UAAU,EAAE,aAAa,CAAC,EAAE,KAAK,CAAC,CAAC","sourcesContent":["import { Component, Prop, h, Method, Host } from '@stencil/core';\nimport { openWormhole } from 'stencil-wormhole';\nimport { __ } from '@wordpress/i18n';\n\n@Component({\n  tag: 'sc-order-password',\n  styleUrl: 'sc-order-password.scss',\n  shadow: true,\n})\nexport class ScOrderPassword {\n  private input: HTMLScInputElement;\n  private confirmInput: HTMLScInputElement;\n\n  @Prop() loggedIn: boolean;\n\n  /** The input's size. */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** The input's value attribute. */\n  @Prop({ mutable: true }) value = '';\n\n  /** Draws a pill-style input with rounded edges. */\n  @Prop({ reflect: true }) pill = false;\n\n  /** The input's label. */\n  @Prop() label: string;\n\n  /** Should we show the label */\n  @Prop() showLabel: boolean = true;\n\n  /** The input's help text. */\n  @Prop() help: string = '';\n\n  /** The input's placeholder text. */\n  @Prop() placeholder: string;\n\n  /** Disables the input. */\n  @Prop({ reflect: true }) disabled: boolean = false;\n\n  /** Makes the input readonly. */\n  @Prop({ reflect: true }) readonly: boolean = false;\n\n  /** Makes the input a required field. */\n  @Prop({ reflect: true }) required = false;\n\n  /** The input's autofocus attribute. */\n  @Prop() autofocus: boolean;\n\n  /** Does the email exist? */\n  @Prop() emailExists: boolean;\n\n  /** The input's password confirmation attribute. */\n  @Prop({ reflect: true }) confirmation = false;\n\n  /** The input's confirmation label text. */\n  @Prop() confirmationLabel: string;\n\n  /** The input's confirmation placeholder text. */\n  @Prop() confirmationPlaceholder: string;\n\n  /** The input's confirmation help text. */\n  @Prop() confirmationHelp: string;\n\n  /** Ensures strong password validation. */\n  @Prop({ reflect: true }) enableValidation = true;\n\n  @Method()\n  async reportValidity() {\n    if (this.loggedIn) return true;\n\n    this.input?.setCustomValidity?.('');\n    this.confirmInput?.setCustomValidity?.('');\n\n    // confirmation is enabled.\n    if (this.confirmation) {\n      if (this.confirmInput?.value && this.input?.value !== this.confirmInput?.value) {\n        this.confirmInput.setCustomValidity(__('Password does not match.', 'surecart'));\n      }\n    }\n\n    if (this.enableValidation) {\n      const validPassword = this.validatePassword(this.input?.value);\n      if (!validPassword) {\n        this.input.setCustomValidity(__('Passwords should at least 6 characters and contain one special character.', 'surecart'));\n      }\n    }\n\n    const valid = await this.input.reportValidity();\n    if (!valid) {\n      return false;\n    }\n\n    if (this.confirmInput) {\n      return this.confirmInput.reportValidity();\n    }\n\n    return valid;\n  }\n\n  validatePassword(password: string) {\n    const regex = new RegExp('^(?=.*?[#?!@$%^&*-]).{6,}$');\n    if (regex.test(password)) return true;\n    return false;\n  }\n\n  render() {\n    if (this.loggedIn) {\n      return <Host style={{ display: 'none' }}></Host>;\n    }\n\n    // if (this.emailExists) {\n    //   return <Host style={{ display: 'none' }}></Host>;\n    // }\n\n    return (\n      <div class=\"password\">\n        <sc-input\n          ref={el => (this.input = el as HTMLScInputElement)}\n          label={this.label}\n          help={this.help}\n          autofocus={this.autofocus}\n          placeholder={this.placeholder}\n          showLabel={this.showLabel}\n          size={this.size ? this.size : 'medium'}\n          type=\"password\"\n          name=\"password\"\n          value={this.value}\n          required={this.required}\n          disabled={this.disabled}\n        ></sc-input>\n        {this.confirmation && (\n          <sc-input\n            ref={el => (this.confirmInput = el as HTMLScInputElement)}\n            label={this.confirmationLabel ?? __('Confirm Password', 'surecart')}\n            help={this.confirmationHelp}\n            placeholder={this.confirmationPlaceholder}\n            size={this.size ? this.size : 'medium'}\n            type=\"password\"\n            value={this.value}\n            required={this.required}\n            disabled={this.disabled}\n          ></sc-input>\n        )}\n      </div>\n    );\n  }\n}\n\nopenWormhole(ScOrderPassword, ['loggedIn', 'emailExists'], false);\n"]}