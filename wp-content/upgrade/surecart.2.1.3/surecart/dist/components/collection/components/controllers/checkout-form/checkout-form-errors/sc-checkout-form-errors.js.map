{"version":3,"file":"sc-checkout-form-errors.js","sourceRoot":"","sources":["../../../../../src/components/controllers/checkout-form/checkout-form-errors/sc-checkout-form-errors.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,eAAe,CAAC;AACzD,OAAO,EAAE,EAAE,EAAE,MAAM,iBAAiB,CAAC;AACrC,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAIhD;;GAEG;AAKH,MAAM,OAAO,oBAAoB;;;;;EAO/B,oFAAoF;EACpF,eAAe,CAAC,KAAK;IACnB,IAAI,KAAK,CAAC,IAAI,KAAK,8BAA8B,EAAE;MACjD,OAAO,EAAE,CAAC,wCAAwC,EAAE,UAAU,CAAC,CAAC;KACjE;IACD,OAAO,YAAM,SAAS,EAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,GAAS,CAAC;EAClD,CAAC;EAED,oFAAoF;EACpF,YAAY;;IACV,IAAI,MAAA,MAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,iBAAiB,0CAAG,CAAC,CAAC,0CAAE,OAAO,EAAE;MAC/C,OAAO,IAAI,CAAC,eAAe,CAAC,MAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,iBAAiB,0CAAG,CAAC,CAAC,CAAC,CAAC;KACjE;SAAM,IAAI,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,0CAAE,OAAO,EAAE;MAC/B,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,CAAC,CAAC;KAC1C;IACD,OAAO,EAAE,CAAC;EACZ,CAAC;EAED,MAAM;IACJ,yEAAyE;IACzE,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;MACnF,OAAO,EAAC,IAAI,IAAC,KAAK,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,GAAS,CAAC;KAClD;IAED,OAAO,CACL,EAAC,IAAI;MACH,gBAAU,IAAI,EAAC,QAAQ,EAAC,YAAY,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;QACrE,YAAM,IAAI,EAAC,OAAO,IAAE,IAAI,CAAC,YAAY,EAAE,CAAQ,CACtC;MACX,eAAQ,CACH,CACR,CAAC;EACJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CACF;AAED,YAAY,CAAC,oBAAoB,EAAE,CAAC,eAAe,EAAE,OAAO,CAAC,EAAE,KAAK,CAAC,CAAC","sourcesContent":["import { Component, h, Host, Prop } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { openWormhole } from 'stencil-wormhole';\n\nimport { FormState, ResponseError } from '../../../../types';\n\n/**\n * This component listens for a confirmed event and redirects to the success url.\n */\n@Component({\n  tag: 'sc-checkout-form-errors',\n  shadow: true,\n})\nexport class ScCheckoutFormErrors {\n  /** The current order. */\n  @Prop() checkoutState: FormState;\n\n  /** Error to display. */\n  @Prop() error: ResponseError | null;\n\n  /** This filters the error message with some more client friendly error messages. */\n  getErrorMessage(error) {\n    if (error.code === 'order.line_items.price.blank') {\n      return __('This product is no longer purchasable.', 'surecart');\n    }\n    return <span innerHTML={error?.message}></span>;\n  }\n\n  /** First will display validation error, then main error if no validation errors. */\n  errorMessage() {\n    if (this.error?.additional_errors?.[0]?.message) {\n      return this.getErrorMessage(this.error?.additional_errors?.[0]);\n    } else if (this?.error?.message) {\n      return this.getErrorMessage(this?.error);\n    }\n    return '';\n  }\n\n  render() {\n    // don't show component if no error message or is finalizing or updating.\n    if (!this.errorMessage() || ['finalizing', 'updating'].includes(this.checkoutState)) {\n      return <Host style={{ display: 'none' }}></Host>;\n    }\n\n    return (\n      <Host>\n        <sc-alert type=\"danger\" scrollOnOpen={true} open={!!this.errorMessage()}>\n          <span slot=\"title\">{this.errorMessage()}</span>\n        </sc-alert>\n        <slot />\n      </Host>\n    );\n  }\n}\n\nopenWormhole(ScCheckoutFormErrors, ['checkoutState', 'error'], false);\n"]}