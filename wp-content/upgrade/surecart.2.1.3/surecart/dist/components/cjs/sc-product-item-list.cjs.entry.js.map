{"file":"sc-product-item-list.entry.cjs.js","mappings":";;;;;;;;AAAA,MAAM,oBAAoB,GAAG,+9EAA+9E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eCuK7+E,UAAE;;eAEF,UAAE;;eAEF,UAAE;;eAEF,UAAE;;eAEF,UAAE;;;;;6iBAgBkE,UAAE,oGACH,UAAE,8FACR,UAAE,0GACD,UAAE;yOASb,UAAE;;;;;;;;;;gNAsC7C,UAAE,4MAUZ,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/components/controllers/products/sc-product-item-list/sc-product-item-list.scss?tag=sc-product-item-list&encapsulation=shadow","./src/components/controllers/products/sc-product-item-list/sc-product-item-list.tsx"],"sourcesContent":[".product-item-list {\n  display: grid;\n  grid-template-columns: repeat(var(--sc-product-item-list-column), 1fr);\n  gap: var(--sc-product-item-list-gap);\n\n  &__wrapper {\n    container-type: inline-size;\n    display: grid;\n    gap: var(--sc-spacing-medium);\n\n    @container (max-width: 576px) {\n      .product-item-list {\n        grid-template-columns: 1fr;\n      }\n    }\n    @container (min-width: 576px) and (max-width: 768px) {\n      .product-item-list {\n        grid-template-columns: repeat(3, 1fr);\n      }\n    }\n  }\n\n  &__sort,\n  &__empty,\n  &__search {\n    font-size: 16px;\n  }\n\n  &__search {\n    display: flex;\n    align-items: center;\n    gap: var(--sc-spacing-small);\n  }\n\n  &__header {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    align-items: center;\n  }\n\n  &__loader {\n    display: grid;\n    gap: 0.88rem;\n    padding-top: var(--sc-product-item-padding-top);\n    padding-bottom: var(--sc-product-item-padding-bottom);\n    padding-left: var(--sc-product-item-padding-left);\n    padding-right: var(--sc-product-item-padding-right);\n    margin-top: var(--sc-product-item-margin-top);\n    margin-bottom: var(--sc-product-item-margin-bottom);\n    margin-left: var(--sc-product-item-margin-left);\n    margin-right: var(--sc-product-item-margin-right);\n    border: solid var(--sc-product-item-border-width) var(--sc-product-item-border-color);\n    border-radius: var(--sc-product-item-border-radius);\n    color: var(--sc-product-title-text-color);\n    background-color: var(--sc-product-item-background-color);\n    line-height: 1;\n  }\n\n  &__pagination {\n    padding: 40px 0 0;\n    width: 100%;\n    font-size: var(--sc-font-size-small, var(--wp--preset--font-size--x-small));\n  }\n\n  &__search-tag {\n    display: flex;\n    align-items: center;\n    gap: var(--sc-spacing-small);\n  }\n\n  &__search-label {\n    font-size: var(--sc-font-size-small, var(--wp--preset--font-size--x-small));\n  }\n}\n\n.search-button,\n.clear-button {\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity var(--sc-transition-medium) ease-in-out;\n  cursor: pointer;\n}\n\n.product-item-list__has-search {\n  .search-button,\n  .clear-button {\n    opacity: 1;\n    visibility: visible;\n  }\n}\n\nsc-product-item::part(image) {\n  aspect-ratio: var(--sc-product-image-aspect-ratio);\n}\n\nsc-pagination {\n  font-size: var(--sc-pagination-font-size);\n}\n","import { Component, Element, h, Prop, State, Watch } from '@stencil/core';\nimport { addQueryArgs, getQueryArgs } from '@wordpress/url';\nimport { __ } from '@wordpress/i18n';\n\nimport { Product } from '../../../../types';\nimport apiFetch from '../../../../functions/fetch';\n\nexport type LayoutConfig = {\n  blockName: string;\n  attributes: any;\n}[];\n\n@Component({\n  tag: 'sc-product-item-list',\n  styleUrl: 'sc-product-item-list.scss',\n  shadow: true,\n})\nexport class ScProductItemList {\n  @Element() el: HTMLScProductItemListElement;\n  /** Limit to a set of ids.  */\n  @Prop() ids: string[];\n\n  /** Sort */\n  @Prop({ mutable: true }) sort: string = 'created_at:desc';\n\n  /** Query to search for */\n  @Prop({ mutable: true }) query: string;\n\n  /** Should allow search */\n  @Prop() searchEnabled: boolean = true;\n\n  /** Should allow search */\n  @Prop() sortEnabled: boolean = true;\n\n  /** Should we paginate? */\n  @Prop() paginationEnabled: boolean = true;\n\n  /** Should we paginate? */\n  @Prop() ajaxPagination: boolean = true;\n\n  /** Should we auto-scroll to the top when paginating via ajax */\n  @Prop() paginationAutoScroll: boolean = true;\n\n  /* Layout configuration */\n  @Prop() layoutConfig: LayoutConfig;\n\n  /* Pagination alignment */\n  @Prop() paginationAlignment: string = 'center';\n\n  /* Limit per page */\n  @Prop() limit: number = 15;\n\n  /* Product list */\n  @State() products: Product[];\n\n  /* Loading indicator */\n  @State() loading: boolean = false;\n\n  /** Busy indicator */\n  @State() busy: boolean = false;\n\n  /* Current page */\n  @State() currentPage: number = 1;\n\n  @State() currentQuery: string;\n\n  @State() pagination: {\n    total: number;\n    total_pages: number;\n  } = {\n    total: 0,\n    total_pages: 0,\n  };\n\n  componentWillLoad() {\n    this.getProducts();\n  }\n\n  // Append URL if no 'product-page' found\n  doPagination(page: number) {\n    // handle ajax pagination\n    if (this.ajaxPagination) {\n      this.currentPage = page;\n      this.updateProducts();\n      this.paginationAutoScroll && this.el.scrollIntoView({ behavior: 'smooth' });\n      return;\n    }\n\n    // handle server pagination.\n    const newUrl = addQueryArgs(location.href, { 'product-page': page });\n    window.location.replace(newUrl);\n  }\n\n  // Fetch all products\n  async getProducts() {\n    const { 'product-page': page } = getQueryArgs(window.location.href) as { 'product-page': string };\n\n    this.currentPage = this.paginationEnabled && page ? parseInt(page) : 1;\n\n    try {\n      this.loading = true;\n      await this.fetchProducts();\n    } catch (error) {\n      console.error(error);\n    } finally {\n      this.loading = false;\n    }\n  }\n\n  @Watch('sort')\n  async handleSortChange() {\n    this.currentPage = 1;\n    this.updateProducts();\n  }\n\n  async updateProducts() {\n    try {\n      this.busy = true;\n      await this.fetchProducts();\n    } catch (error) {\n      console.error(error);\n    } finally {\n      this.busy = false;\n    }\n  }\n\n  private debounce;\n  @Watch('ids')\n  @Watch('limit')\n  handleIdsChange() {\n    if (this.debounce !== null) {\n      clearTimeout(this.debounce);\n      this.debounce = null;\n    }\n\n    this.debounce = window.setTimeout(() => {\n      // your debounced traitment\n      this.updateProducts();\n      this.debounce = null;\n    }, 200);\n  }\n\n  async fetchProducts() {\n    const response = (await apiFetch({\n      path: addQueryArgs(`surecart/v1/products/`, {\n        expand: ['prices', 'product_medias', 'product_media.media'],\n        archived: false,\n        status: ['published'],\n        per_page: this.limit,\n        page: this.currentPage,\n        sort: this.sort,\n        ...(this.ids?.length ? { ids: this.ids } : {}),\n        ...(this.query ? { query: this.query } : {}),\n      }),\n      parse: false,\n    })) as Response;\n    this.currentQuery = this.query;\n    this.pagination = {\n      total: parseInt(response.headers.get('X-WP-Total')),\n      total_pages: parseInt(response.headers.get('X-WP-TotalPages')),\n    };\n    this.products = (await response.json()) as Product[];\n  }\n\n  renderSortName() {\n    switch (this.sort) {\n      case 'created_at:desc':\n        return __('Latest', 'surecart');\n      case 'created_at:asc':\n        return __('Oldest', 'surecart');\n      case 'name:asc':\n        return __('Alphabetical, A-Z', 'surecart');\n      case 'name:desc':\n        return __('Alphabetical, Z-A', 'surecart');\n      default:\n        return __('Sort', 'surecart');\n    }\n  }\n\n  render() {\n    return (\n      <div class={{ 'product-item-list__wrapper': true, 'product-item-list__has-search': !!this.query }}>\n        {(this.searchEnabled || this.sortEnabled) && (\n          <div class=\"product-item-list__header\">\n            <div class=\"product-item-list__sort\">\n              {this.sortEnabled && (\n                <sc-dropdown style={{ '--panel-width': '15rem' }}>\n                  <sc-button type=\"text\" caret slot=\"trigger\">\n                    {this.renderSortName()}\n                  </sc-button>\n                  <sc-menu>\n                    <sc-menu-item onClick={() => (this.sort = 'created_at:desc')}>{__('Latest', 'surecart')}</sc-menu-item>\n                    <sc-menu-item onClick={() => (this.sort = 'created_at:asc')}>{__('Oldest', 'surecart')}</sc-menu-item>\n                    <sc-menu-item onClick={() => (this.sort = 'name:asc')}>{__('Alphabetical, A-Z', 'surecart')}</sc-menu-item>\n                    <sc-menu-item onClick={() => (this.sort = 'name:desc')}>{__('Alphabetical, Z-A', 'surecart')}</sc-menu-item>\n                  </sc-menu>\n                </sc-dropdown>\n              )}\n            </div>\n            <div class=\"product-item-list__search\">\n              {this.searchEnabled &&\n                (this.query?.length && this.query === this.currentQuery ? (\n                  <div class=\"product-item-list__search-tag\">\n                    <div class=\"product-item-list__search-label\">{__('Search Results:', 'surecart')}</div>\n                    <sc-tag\n                      clearable\n                      onScClear={() => {\n                        this.query = '';\n                        this.currentQuery = '';\n                        this.updateProducts();\n                      }}\n                    >\n                      {this.query}\n                    </sc-tag>\n                  </div>\n                ) : (\n                  <sc-input\n                    type=\"text\"\n                    placeholder=\"Search\"\n                    size=\"small\"\n                    onKeyDown={e => {\n                      if (e.key === 'Enter') {\n                        this.updateProducts();\n                      }\n                    }}\n                    value={this.query}\n                    onScInput={e => (this.query = e.target.value)}\n                  >\n                    {this.query ? (\n                      <sc-icon\n                        class=\"clear-button\"\n                        slot=\"prefix\"\n                        name=\"x\"\n                        onClick={() => {\n                          this.query = '';\n                        }}\n                      />\n                    ) : (\n                      <sc-icon slot=\"prefix\" name=\"search\" />\n                    )}\n                    <sc-button class=\"search-button\" type=\"link\" slot=\"suffix\" busy={this.busy} onClick={() => this.updateProducts()}>\n                      {__('Search', 'surecart')}\n                    </sc-button>\n                  </sc-input>\n                ))}\n            </div>\n          </div>\n        )}\n\n        {!this.products?.length && !this.loading && (\n          <sc-empty class=\"product-item-list__empty\" icon=\"shopping-bag\">\n            {__('No products found.', 'surecart')}\n          </sc-empty>\n        )}\n\n        <div class=\"product-item-list\">\n          {this.loading\n            ? [...Array(this.ids?.length || this.limit || 10)].map(() => (\n                <div class=\"product-item-list__loader\">\n                  {this.layoutConfig?.map(layout => {\n                    switch (layout.blockName) {\n                      case 'surecart/product-item-title':\n                        return (\n                          <div style={{ textAlign: 'var(--sc-product-title-align)' }}>\n                            <sc-skeleton style={{ width: '80%', display: 'inline-block' }}></sc-skeleton>\n                          </div>\n                        );\n                      case 'surecart/product-item-image':\n                        return (\n                          <sc-skeleton\n                            style={{\n                              'width': '100%',\n                              'minHeight': '90%',\n                              'aspectRatio': layout.attributes?.ratio ?? '1/1.4',\n                              '--sc-border-radius-pill': '12px',\n                              'display': 'inline-block',\n                            }}\n                          ></sc-skeleton>\n                        );\n                      case 'surecart/product-item-price':\n                        return (\n                          <div style={{ textAlign: 'var(--sc-product-price-align)' }}>\n                            <sc-skeleton style={{ width: '40%', display: 'inline-block' }}></sc-skeleton>\n                          </div>\n                        );\n                      default:\n                        return null;\n                    }\n                  })}\n                </div>\n              ))\n            : (this.products || []).map(product => {\n                return <sc-product-item exportparts=\"title, price, image\" product={product} layoutConfig={this.layoutConfig}></sc-product-item>;\n              })}\n        </div>\n        {!!this.products?.length && this.pagination.total > this.products.length && this.paginationEnabled && (\n          <div\n            class={{\n              'product-item-list__pagination': true,\n              '--is-aligned-left': this.paginationAlignment === 'left',\n              '--is-aligned-center': this.paginationAlignment === 'center',\n              '--is-aligned-right': this.paginationAlignment === 'right',\n            }}\n          >\n            <sc-pagination\n              page={this.currentPage}\n              perPage={this.limit}\n              total={this.pagination.total}\n              totalPages={this.pagination.total_pages}\n              totalShowing={this.limit}\n              onScNextPage={() => this.doPagination(this.currentPage + 1)}\n              onScPrevPage={() => this.doPagination(this.currentPage - 1)}\n            ></sc-pagination>\n          </div>\n        )}\n        {(this.busy || this.loading) && <sc-block-ui />}\n      </div>\n    );\n  }\n}\n"],"version":3}