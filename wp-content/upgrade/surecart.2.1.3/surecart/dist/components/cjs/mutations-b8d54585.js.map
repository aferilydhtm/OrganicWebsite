{"file":"mutations-b8d54585.js","mappings":";;;;AAGA;;;MAGa,aAAa,GAAG,MAAMA,sBAAkB,CAACC,cAAK,CAAC,MAAM,EAAEA,cAAK,CAAC,IAAI,EAAE;AAEhF;;;;MAIa,YAAY,GAAG,QAAQ,KAAKA,cAAK,CAAC,KAAK,GAAG,CAAC,GAAGA,cAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,EAAE;AAEnF;;;;MAIa,cAAc,GAAG,CAAC,QAAQ,GAAG,EAAE,MAAMA,cAAK,CAAC,KAAK,GAAG,CAAC,CAAC,QAAQ,GAAGA,cAAK,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,KAAK,QAAQ,CAAC,GAAG,EAAE;;;;;;","names":["clearSavedCheckout","state"],"sources":["./src/store/checkout/mutations.ts"],"sourcesContent":["import state from './store';\nimport { clearCheckout as clearSavedCheckout } from '../checkouts';\n\n/**\n * Clear the current checkout.\n */\nexport const clearCheckout = () => clearSavedCheckout(state.formId, state.mode);\n\n/**\n * Lock the checkout (disables input and submission)\n * Pass a lock name to prevent conflicts and allow multiple locks.\n */\nexport const lockCheckout = lockName => (state.locks = [...state.locks, lockName]);\n\n/**\n * Unlock the checkout.\n * Pass an optional lock name to only unlock a specific lock\n */\nexport const unLockCheckout = (lockName = '') => (state.locks = !!lockName ? state.locks.filter(name => name !== lockName) : []);\n"],"version":3}