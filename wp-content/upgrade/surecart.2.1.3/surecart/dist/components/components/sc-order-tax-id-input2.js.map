{"file":"sc-order-tax-id-input2.js","mappings":";;;;;;;;;;;;;;;;AAAA,MAAM,oBAAoB,GAAG,sBAAsB;;MCctC,iBAAiB;;;;;;;;gBAKJ,KAAK;;;gBASL,KAAK;;;;;;;EA0B7B,SAAS;;IACP,IAAI,CAAA,MAAA,IAAI,CAAC,aAAa,0CAAE,WAAW,MAAK,QAAQ,EAAE;MAChD,OAAO,SAAS,CAAC;KAClB;IACD,IAAI,CAAA,MAAA,IAAI,CAAC,WAAW,0CAAE,0BAA0B,MAAK,sBAAsB,EAAE;MAC3E,OAAO,SAAS,CAAC;KAClB;IACD,OAAO,CAAA,MAAA,IAAI,CAAC,aAAa,0CAAE,eAAe,IAAG,OAAO,GAAG,SAAS,CAAC;GAClE;EAED,MAAM,gBAAgB,CAAC,cAAc;IACnC,IAAI;MACF,YAAY,CAAC,gBAAgB,CAAC,CAAC;MAC/BA,KAAa,CAAC,QAAQ,IAAI,MAAM,sBAAsB,CAAC;QACrD,EAAE,EAAEA,KAAa,CAAC,QAAQ,CAAC,EAAE;QAC7B,IAAI,EAAE,EAAE,cAAc,EAAE;OACzB,CAAC,CAAa,CAAC;KACjB;IAAC,OAAO,CAAC,EAAE;MACV,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;MACjB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;KACtB;YAAS;MACR,cAAc,CAAC,gBAAgB,CAAC,CAAC;KAClC;GACF;EAED,MAAM;;IACJ,QACE,uBACE,IAAI,EAAE,IAAI,CAAC,IAAI,EACf,MAAM,EAAE,MAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,cAAc,0CAAE,MAAM,EAC1C,IAAI,EAAE,MAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,cAAc,0CAAE,WAAW,EAC7C,OAAO,EAAE,MAAC,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,0CAAE,gBAA4B,0CAAE,OAAO,EAC5D,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,EACxB,OAAO,EAAE,IAAI,CAAC,IAAI,EAClB,UAAU,EAAE,CAAC;QACX,CAAC,CAAC,wBAAwB,EAAE,CAAC;QAC7B,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;OACjC,EACD,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,UAAU,EAAE,IAAI,CAAC,UAAU,EAC3B,UAAU,EAAE,IAAI,CAAC,UAAU,GACV,EACnB;GACH;;;;;;;;;;;;;;AAGH,YAAY,CAAC,iBAAiB,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,eAAe,EAAE,aAAa,EAAE,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["checkoutState"],"sources":["./src/components/controllers/checkout-form/order-tax-id-input/sc-order-tax-id-input.css?tag=sc-order-tax-id-input&encapsulation=shadow","./src/components/controllers/checkout-form/order-tax-id-input/sc-order-tax-id-input.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n","import { Component, Event, EventEmitter, h, Prop } from '@stencil/core';\nimport { state as checkoutState } from '@store/checkout';\nimport { lockCheckout, unLockCheckout } from '@store/checkout/mutations';\nimport { __ } from '@wordpress/i18n';\nimport { createOrUpdateCheckout } from '../../../../services/session';\nimport { openWormhole } from 'stencil-wormhole';\n\nimport { Address, Checkout, ResponseError, TaxIdentifier, TaxProtocol } from '../../../../types';\n\n@Component({\n  tag: 'sc-order-tax-id-input',\n  styleUrl: 'sc-order-tax-id-input.css',\n  shadow: true,\n})\nexport class ScOrderTaxIdInput {\n  /** The order */\n  @Prop() order: Partial<Checkout>;\n\n  /** Force show the field. */\n  @Prop() show: boolean = false;\n\n  /** Tax identifier */\n  @Prop() taxIdentifier: TaxIdentifier;\n\n  /** The tax protocol. */\n  @Prop() taxProtocol: TaxProtocol;\n\n  /** Is this busy */\n  @Prop() busy: boolean = false;\n\n  /** Other zones label */\n  @Prop() otherLabel: string;\n\n  /** GST zone label */\n  @Prop() caGstLabel: string;\n\n  /** AU zone label */\n  @Prop() auAbnLabel: string;\n\n  /** UK zone label */\n  @Prop() gbVatLabel: string;\n\n  /** EU zone label */\n  @Prop() euVatLabel: string;\n\n  /** Make a request to update the order. */\n  @Event() scUpdateOrder: EventEmitter<{\n    data: Partial<Checkout>;\n    options?: { silent?: boolean };\n  }>;\n\n  /** Error event */\n  @Event() scError: EventEmitter<ResponseError>;\n\n  getStatus() {\n    if (this.taxIdentifier?.number_type !== 'eu_vat') {\n      return 'unknown';\n    }\n    if (this.taxProtocol?.eu_vat_unverified_behavior === 'apply_reverse_charge') {\n      return 'unknown';\n    }\n    return this.taxIdentifier?.eu_vat_verified ? 'valid' : 'invalid';\n  }\n\n  async maybeUpdateOrder(tax_identifier) {\n    try {\n      lockCheckout('tax_identifier');\n      checkoutState.checkout = (await createOrUpdateCheckout({\n        id: checkoutState.checkout.id,\n        data: { tax_identifier },\n      })) as Checkout;\n    } catch (e) {\n      console.error(e);\n      this.scError.emit(e);\n    } finally {\n      unLockCheckout('tax_identifier');\n    }\n  }\n\n  render() {\n    return (\n      <sc-tax-id-input\n        show={this.show}\n        number={this.order?.tax_identifier?.number}\n        type={this.order?.tax_identifier?.number_type}\n        country={(this?.order?.shipping_address as Address)?.country}\n        status={this.getStatus()}\n        loading={this.busy}\n        onScChange={e => {\n          e.stopImmediatePropagation();\n          this.maybeUpdateOrder(e.detail);\n        }}\n        otherLabel={this.otherLabel}\n        caGstLabel={this.caGstLabel}\n        auAbnLabel={this.auAbnLabel}\n        gbVatLabel={this.gbVatLabel}\n        euVatLabel={this.euVatLabel}\n      ></sc-tax-id-input>\n    );\n  }\n}\n\nopenWormhole(ScOrderTaxIdInput, ['draft', 'order', 'tax_status', 'taxIdentifier', 'taxProtocol', 'busy'], false);\n"],"version":3}