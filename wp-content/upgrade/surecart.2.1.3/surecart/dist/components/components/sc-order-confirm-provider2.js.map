{"file":"sc-order-confirm-provider2.js","mappings":";;;;;;;;;;;;;;AAAA,MAAM,yBAAyB,GAAG,6VAA6V;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0bCoI/U,UAAE,8PAIF,UAAE;;;uKAWP,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/components/providers/order-confirm-provider/sc-order-confirm-provider.scss?tag=sc-order-confirm-provider&encapsulation=shadow","./src/components/providers/order-confirm-provider/sc-order-confirm-provider.tsx"],"sourcesContent":[".confirm {\n  &__icon {\n    margin-bottom: var(--sc-spacing-medium);\n    display: flex;\n    justify-content: center;\n  }\n\n  &__icon-container {\n    background: var(--sc-color-primary-500);\n    width: 55px;\n    height: 55px;\n    border-radius: 999999px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    font-size: 26px;\n    line-height: 1;\n    color: white;\n  }\n}\n\nsc-dialog::part(overlay) {\n  backdrop-filter: blur(4px);\n}\n","import { Component, Element, Event, EventEmitter, h, Host, Listen, Prop, State } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\nimport { addQueryArgs } from '@wordpress/url';\n\nimport apiFetch from '../../../functions/fetch';\nimport { expand } from '../../../services/session';\nimport { state as checkoutState } from '@store/checkout';\nimport { Checkout, ManualPaymentMethod, Product } from '../../../types';\nimport { clearCheckout } from '@store/checkout/mutations';\nimport { maybeConvertAmount } from '../../../functions/currency';\n\n/**\n * This component listens to the order status\n * and confirms the order when payment is successful.\n */\n@Component({\n  tag: 'sc-order-confirm-provider',\n  styleUrl: 'sc-order-confirm-provider.scss',\n  shadow: true,\n})\nexport class ScOrderConfirmProvider {\n  /** The order confirm provider element */\n  @Element() el: HTMLScOrderConfirmProviderElement;\n\n  /** Whether to show success modal */\n  @State() showSuccessModal: boolean = false;\n\n  @State() confirmedCheckout: Checkout;\n\n  /** Success url. */\n  @Prop() successUrl: string;\n\n  /** Success text for the form. */\n  @Prop() successText: {\n    title: string;\n    description: string;\n    button: string;\n  };\n\n  /** The order is paid event. */\n  @Event() scOrderPaid: EventEmitter<Checkout>;\n\n  @Event() scSetState: EventEmitter<string>;\n\n  /** Error event. */\n  @Event() scError: EventEmitter<{ message: string; code?: string; data?: any; additional_errors?: any } | {}>;\n\n  /** Listen for paid event. This is triggered by Stripe or Paypal elements when payment succeeds. */\n  @Listen('scPaid')\n  handlePaidEvent() {\n    this.confirmOrder();\n  }\n\n  /** Confirm the order. */\n  async confirmOrder() {\n    try {\n      this.confirmedCheckout = (await apiFetch({\n        method: 'PATCH',\n        path: addQueryArgs(`surecart/v1/checkouts/${checkoutState?.checkout?.id}/confirm`, { expand }),\n      })) as Checkout;\n      this.scSetState.emit('CONFIRMED');\n      // emit the order paid event for tracking scripts.\n      this.scOrderPaid.emit(this.confirmedCheckout);\n      this.doGoogleAnalytics();\n    } catch (e) {\n      console.error(e);\n      this.scError.emit(e);\n    } finally {\n      // always clear the checkout.\n      clearCheckout();\n      // get success url.\n      const successUrl = this.confirmedCheckout?.metadata?.success_url || this.successUrl;\n      if (successUrl) {\n        // set state to redirecting.\n        this.scSetState.emit('REDIRECT');\n        setTimeout(() => window.location.assign(addQueryArgs(successUrl, { order: this.confirmedCheckout?.id })), 50);\n      } else {\n        this.showSuccessModal = true;\n      }\n    }\n  }\n\n  doGoogleAnalytics() {\n    if (!window?.dataLayer && !window?.gtag) return;\n\n    const data = {\n      transaction_id: this.confirmedCheckout?.id,\n      value: maybeConvertAmount(this.confirmedCheckout?.total_amount, this.confirmedCheckout?.currency || 'USD'),\n      currency: (this.confirmedCheckout.currency || '').toUpperCase(),\n      ...(this.confirmedCheckout?.discount?.promotion?.code ? { coupon: this.confirmedCheckout?.discount?.promotion?.code } : {}),\n      ...(this.confirmedCheckout?.tax_amount ? { tax: maybeConvertAmount(this.confirmedCheckout?.tax_amount, this.confirmedCheckout?.currency || 'USD') } : {}),\n      items: (this.confirmedCheckout?.line_items?.data || []).map(item => ({\n        item_name: (item?.price?.product as Product)?.name || '',\n        discount: item?.discount_amount ? maybeConvertAmount(item?.discount_amount || 0, this.confirmedCheckout?.currency || 'USD') : 0,\n        price: maybeConvertAmount(item?.price?.amount || 0, this.confirmedCheckout?.currency || 'USD'),\n        quantity: item?.quantity || 1,\n      })),\n    };\n\n    // handle gtag (analytics script.)\n    if (window?.gtag) {\n      window.gtag('event', 'purchase', data);\n    }\n\n    // handle dataLayer (google tag manager).\n    if (window?.dataLayer) {\n      window.dataLayer.push({ ecommerce: null }); // Clear the previous ecommerce object.\n      window.dataLayer.push({\n        event: 'purchase',\n        ecommerce: data,\n      });\n    }\n  }\n\n  getSuccessUrl() {\n    const url = this.confirmedCheckout?.metadata?.success_url || this.successUrl;\n    return url ? addQueryArgs(url, { order: this.confirmedCheckout?.id }) : window?.scData?.pages?.dashboard;\n  }\n\n  render() {\n    const manualPaymentMethod = this.confirmedCheckout?.manual_payment_method as ManualPaymentMethod;\n\n    return (\n      <Host>\n        <slot />\n        <sc-dialog open={!!this.showSuccessModal} style={{ '--body-spacing': 'var(--sc-spacing-xxx-large)' }} noHeader onScRequestClose={e => e.preventDefault()}>\n          <div class=\"confirm__icon\">\n            <div class=\"confirm__icon-container\">\n              <sc-icon name=\"check\" />\n            </div>\n          </div>\n          <sc-dashboard-module\n            heading={this.successText?.title || __('Thanks for your order!', 'surecart')}\n            style={{ '--sc-dashboard-module-spacing': 'var(--sc-spacing-x-large)', 'textAlign': 'center' }}\n          >\n            <span slot=\"description\">\n              {this.successText?.description || __('Your payment was successful, and your order is complete. A receipt is on its way to your inbox.', 'surecart')}\n            </span>\n            {!!manualPaymentMethod?.name && !!manualPaymentMethod?.instructions && (\n              <sc-alert type=\"info\" open style={{ 'text-align': 'left' }}>\n                <span slot=\"title\">{manualPaymentMethod?.name}</span>\n                {manualPaymentMethod?.instructions.split('\\n').map(i => {\n                  return <p>{i}</p>;\n                })}\n              </sc-alert>\n            )}\n            <sc-button href={this.getSuccessUrl()} size=\"large\" type=\"primary\">\n              {this.successText?.button || __('Continue', 'surecart')}\n              <sc-icon name=\"arrow-right\" slot=\"suffix\" />\n            </sc-button>\n          </sc-dashboard-module>\n        </sc-dialog>\n      </Host>\n    );\n  }\n}\n"],"version":3}