{"file":"sc-order-shipping-address2.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA,MAAM,yBAAyB,GAAG,+FAA+F;;;;;;;;;;;;;;;;;2BC6C7F,UAAE;8BACC,UAAE;2BACL,UAAE;4BACD,UAAE;4BACF,UAAE;iCACG,UAAE;4BACP,UAAE;;;YAO7B,UAAE;eACC,UAAE;YACL,UAAE;cACA,UAAE;cACF,UAAE;mBACG,UAAE;aACR,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gMAwEkB,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/components/controllers/checkout-form/order-shipping-address/sc-order-shipping-address.scss?tag=sc-order-shipping-address&encapsulation=shadow","./src/components/controllers/checkout-form/order-shipping-address/sc-order-shipping-address.tsx"],"sourcesContent":[":host {\n  display: block;\n}\n\n.sc-order-shipping {\n  &__loading {\n    display: flex;\n    flex-direction: column;\n    gap: 0.5em;\n  }\n}\n","import { Component, Event, EventEmitter, h, Method, Prop, State, Watch } from '@stencil/core';\nimport { state as checkoutState } from '@store/checkout';\nimport { lockCheckout, unLockCheckout } from '@store/checkout/mutations';\nimport { __ } from '@wordpress/i18n';\nimport { createOrUpdateCheckout } from '../../../../services/session';\nimport { openWormhole } from 'stencil-wormhole';\n\nimport { Address, Checkout, TaxStatus } from '../../../../types';\n\n@Component({\n  tag: 'sc-order-shipping-address',\n  styleUrl: 'sc-order-shipping-address.scss',\n  shadow: true,\n})\nexport class ScOrderShippingAddress {\n  private input: HTMLScAddressElement | HTMLScCompactAddressElement;\n\n  /** Label for the field. */\n  @Prop() label: string;\n\n  /** Is this required (defaults to false) */\n  @Prop({ mutable: true }) required: boolean = false;\n\n  /** Is this loading. */\n  @Prop() loading: boolean;\n\n  /** Holds the customer's billing address */\n  @Prop() shippingAddress: Address;\n\n  /** Tax status of the order */\n  @Prop() taxStatus: TaxStatus;\n\n  /** Tax enabled status of the order */\n  @Prop() taxEnabled: boolean;\n\n  /** Is shipping enabled for this order? */\n  @Prop() shippingEnabled: boolean;\n\n  /** Show the full address */\n  @Prop() full: boolean;\n\n  /** Show the name field. */\n  @Prop() showName: boolean;\n\n  /** Show the placeholder fields. */\n  @Prop() namePlaceholder: string = __('Name or Company Name', 'surecart');\n  @Prop() countryPlaceholder: string = __('Country', 'surecart');\n  @Prop() cityPlaceholder: string = __('City', 'surecart');\n  @Prop() line1Placeholder: string = __('Address', 'surecart');\n  @Prop() line2Placeholder: string = __('Address Line 2', 'surecart');\n  @Prop() postalCodePlaceholder: string = __('Postal Code/Zip', 'surecart');\n  @Prop() statePlaceholder: string = __('State/Province/Region', 'surecart');\n\n  /** Default country for address */\n  @Prop() defaultCountry: string;\n\n  /** Placeholder values. */\n  @Prop() placeholders: Partial<Address> = {\n    name: __('Name or Company Name', 'surecart'),\n    country: __('Country', 'surecart'),\n    city: __('City', 'surecart'),\n    line_1: __('Address', 'surecart'),\n    line_2: __('Address Line 2', 'surecart'),\n    postal_code: __('Postal Code/Zip', 'surecart'),\n    state: __('State/Province/Region', 'surecart'),\n  };\n\n  /** Make a request to update the order. */\n  @Event() scUpdateOrder: EventEmitter<{\n    data: Partial<Checkout>;\n    options?: { silent?: boolean };\n  }>;\n\n  /** Address to pass to the component */\n  @State() address: Partial<Address> = {\n    country: null,\n    city: null,\n    line_1: null,\n    line_2: null,\n    postal_code: null,\n    state: null,\n  };\n\n  /** When the shipping address changes, we want to use that instead of what's entered, if we have empty fields. */\n  @Watch('shippingAddress')\n  handleCustomerAddressChange(val, old) {\n    if (val?.id && !old) {\n      this.address = { ...this.address, ...val };\n    }\n  }\n\n  async updateAddressState(address: Partial<Address>) {\n    if (JSON.stringify(address) === JSON.stringify(this.address)) return; // no change, don't update.\n    this.address = address;\n    try {\n      lockCheckout('shipping-address');\n      checkoutState.checkout = (await createOrUpdateCheckout({\n        id: checkoutState.checkout.id,\n        data: {\n          shipping_address: this.address as Address,\n        },\n      })) as Checkout;\n    } catch (e) {\n      console.error(e);\n    } finally {\n      unLockCheckout('shipping-address');\n    }\n  }\n\n  @Method()\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n\n  componentWillLoad() {\n    if (this.defaultCountry && !this.address.country) {\n      this.address.country = this.defaultCountry;\n    }\n\n    this.handleRequirementChange();\n  }\n\n  @Watch('shippingEnabled')\n  @Watch('taxEnabled')\n  handleRequirementChange() {\n    if (this.shippingEnabled || this.taxEnabled) {\n      this.required = true;\n    }\n  }\n\n  render() {\n    if (this.shippingEnabled || this.full) {\n      return (\n        <sc-address\n          exportparts=\"label, help-text, form-control, input__base, select__base, columns, search__base, menu__base\"\n          ref={el => (this.input = el as any)}\n          label={this.label || __('Shipping Address', 'surecart')}\n          placeholders={{\n            name: this.namePlaceholder,\n            country: this.countryPlaceholder,\n            city: this.cityPlaceholder,\n            line_1: this.line1Placeholder,\n            line_2: this.line2Placeholder,\n            postal_code: this.postalCodePlaceholder,\n            state: this.statePlaceholder,\n          }}\n          required={this.required}\n          loading={this.loading}\n          address={this.address}\n          show-name={this.showName}\n          onScChangeAddress={e => this.updateAddressState(e.detail)}\n        ></sc-address>\n      );\n    }\n    return (\n      <sc-compact-address\n        ref={el => (this.input = el as any)}\n        required={this.required}\n        loading={this.loading}\n        address={this.address}\n        placeholders={{\n          name: this.namePlaceholder,\n          country: this.countryPlaceholder,\n          city: this.cityPlaceholder,\n          line_1: this.line1Placeholder,\n          line_2: this.line2Placeholder,\n          postal_code: this.postalCodePlaceholder,\n          state: this.statePlaceholder,\n        }}\n        label={this.label}\n        onScChangeAddress={e => this.updateAddressState(e.detail)}\n      ></sc-compact-address>\n    );\n  }\n}\n\nopenWormhole(ScOrderShippingAddress, ['shippingAddress', 'loading', 'taxStatus', 'taxEnabled', 'shippingEnabled'], false);\n"],"version":3}