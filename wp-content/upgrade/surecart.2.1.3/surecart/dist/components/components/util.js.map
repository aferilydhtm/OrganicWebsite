{"file":"util.js","mappings":"MA8Ba,UAAU,GAAG,GAAG;EAC3B,IAAI,GAAG,CAAC;EAER,IAAI;IACF,GAAG,GAAG,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;GACpB;EAAC,OAAO,CAAC,EAAE;IACV,OAAO,KAAK,CAAC;GACd;EAED,OAAO,GAAG,CAAC,QAAQ,KAAK,OAAO,IAAI,GAAG,CAAC,QAAQ,KAAK,QAAQ,CAAC;AAC/D,EAAE;MAEW,eAAe,GAAG,CAAC,GAAW;EACzC,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;EAC3C,MAAM,SAAS,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,CAAC;EACnD,OAAO,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAC5B,EAAE;MAEW,WAAW,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,UAAU,KAC/C,CAAC,IAAI,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;EACrB,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAG,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;IAAE,OAAO,CAAC,CAAC;EAClD,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAG,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;IAAE,OAAO,CAAC,CAAC,CAAC;EACnD,OAAO,UAAU,CAAC,OAAO,CAAC,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAG,GAAG,CAAC,CAAC,GAAG,UAAU,CAAC,OAAO,CAAC,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAG,GAAG,CAAC,CAAC,CAAC;AACrE,CAAC;;;;","names":[],"sources":["./src/functions/util.ts"],"sourcesContent":["export function pick(o: object, ...props) {\n  return Object.assign({}, ...props.map(prop => ({ [prop]: o[prop] })));\n}\n\nexport function deepEqual(o1, o2) {\n  return typeof o1 === 'object' && Object.keys(o1).length > 0\n    ? Object.keys(o1).length === Object.keys(o2).length && Object.keys(o1).every(p => deepEqual(o1[p], o2[p]))\n    : o1 === o2;\n}\n\nexport function closestElement(selector, base) {\n  function __closestFrom(el) {\n    if (!el || el === document || el === window) return null;\n    let found = el.closest(selector);\n    return found ? found : __closestFrom(el.getRootNode().host);\n  }\n  return __closestFrom(base);\n}\n\nexport function findElements(selector, base) {\n  function __findFrom(el) {\n    if (!el) return null;\n    let found = el.querySelectorAll(selector);\n    return found && found?.length ? found : __findFrom(el?.shadowRoot);\n  }\n  return __findFrom(base);\n}\n\nexport const capitalize = s => s && s[0].toUpperCase() + s.slice(1);\n\nexport const isValidURL = str => {\n  let url;\n\n  try {\n    url = new URL(str);\n  } catch (_) {\n    return false;\n  }\n\n  return url.protocol === 'http:' || url.protocol === 'https:';\n};\n\nexport const getValueFromUrl = (key: string) => {\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  return urlParams.get(key);\n};\n\nexport const sortByArray = (item, key, orderArray) =>\n  (item || []).sort((a, b) => {\n    if (orderArray.indexOf(a?.[key]) === -1) return 1;\n    if (orderArray.indexOf(b?.[key]) === -1) return -1;\n    return orderArray.indexOf(a?.[key]) - orderArray.indexOf(b?.[key]);\n  });\n"],"version":3}