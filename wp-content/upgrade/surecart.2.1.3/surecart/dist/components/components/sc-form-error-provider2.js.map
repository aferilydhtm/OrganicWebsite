{"file":"sc-form-error-provider2.js","mappings":";;;;;MAYa,mBAAmB;;;;;;;;;;;EAkB9B,iBAAiB,CAAC,GAAG;IACnB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;GAC9B;EAGD,iBAAiB,CAAC,GAAG;IACnB,IAAI,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;MAC5C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;KACnB;GACF;;EAID,gBAAgB,CAAC,CAAC;IAChB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,MAAuB,CAAC;IACvC,IAAI,MAAM,CAAC,IAAI,CAAC,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,MAAM,KAAI,EAAE,CAAC,CAAC,MAAM,EAAE;MACvC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;KAChC;GACF;;EAID,cAAc,CAAC,CAAC;;IACd,IAAI,CAAC,KAAK,GAAG,CAAA,MAAA,CAAC,CAAC,MAAM,0CAAE,OAAO,KAAI;MAChC,IAAI,EAAE,EAAE;MACR,OAAO,EAAE,yCAAyC;KACnD,CAAC;GACH;EAED,iBAAiB;IACf,IAAI,CAAC,uBAAuB,EAAE,CAAC;GAChC;EAED,uBAAuB;IACrB,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,yBAAyB,CAAC;MAAE,OAAO;IAC/D,MAAM,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAC;IAC1E,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC;IAC9C,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;GAC3D;EAED,MAAM;IACJ,OAAO,eAAQ,CAAC;GACjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/components/providers/form-error-provider/sc-form-error-provider.tsx"],"sourcesContent":["import { Component, Event, EventEmitter, h, Listen, Prop, State, Watch, Element } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\n\nimport { FormState, FormStateSetter, ResponseError } from '../../../types';\n\n/**\n * This component listens for a confirmed event and redirects to the success url.\n */\n@Component({\n  tag: 'sc-form-error-provider',\n  shadow: true,\n})\nexport class ScFormErrorProvider {\n  /** The element. */\n  @Element() el: HTMLScFormErrorProviderElement;\n\n  /** The current order. */\n  @Prop() checkoutState: FormState;\n\n  /** Set the state. */\n  @Event() scUpdateError: EventEmitter<ResponseError>;\n\n  /** Form state event. */\n  @Event() scSetState: EventEmitter<FormStateSetter>;\n\n  /** Error to display. */\n  @State() error: ResponseError | null;\n\n  /** Trigger the error event when an error happens  */\n  @Watch('error')\n  handleErrorUpdate(val) {\n    this.scUpdateError.emit(val);\n  }\n\n  @Watch('checkoutState')\n  handleStateChange(val) {\n    if (['finalizing', 'updating'].includes(val)) {\n      this.error = null;\n    }\n  }\n\n  /** Listen for error events in component. */\n  @Listen('scError')\n  handleErrorEvent(e) {\n    this.error = e.detail as ResponseError;\n    if (Object.keys(e?.detail || {}).length) {\n      this.scSetState.emit('REJECT'); // make sure we are rejecting the current state.\n    }\n  }\n\n  /** Listen for pay errors. */\n  @Listen('scPayError')\n  handlePayError(e) {\n    this.error = e.detail?.message || {\n      code: '',\n      message: 'Something went wrong with your payment.',\n    };\n  }\n\n  componentWillLoad() {\n    this.maybeAddErrorsComponent();\n  }\n\n  maybeAddErrorsComponent() {\n    if (!!this.el.querySelector('sc-checkout-form-errors')) return;\n    const errorsComponent = document.createElement('sc-checkout-form-errors');\n    console.log(this.el.querySelector('sc-form'));\n    this.el.querySelector('sc-form').prepend(errorsComponent);\n  }\n\n  render() {\n    return <slot />;\n  }\n}\n"],"version":3}