{"file":"sc-form-components-validator2.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA6EoB,UAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["./src/components/providers/form-components-validator/sc-form-components-validator.tsx"],"sourcesContent":["import { Component, Element, h, Prop, State, Watch } from '@stencil/core';\nimport { __ } from '@wordpress/i18n';\n\nimport { Checkout, TaxProtocol } from '../../../types';\n\n@Component({\n  tag: 'sc-form-components-validator',\n  shadow: true,\n})\nexport class ScFormComponentsValidator {\n  @Element() el: HTMLScFormComponentsValidatorElement;\n\n  /** Disable validation? */\n  @Prop() disabled: boolean;\n\n  /** The order */\n  @Prop() order: Checkout;\n\n  /** The tax protocol */\n  @Prop() taxProtocol: TaxProtocol;\n\n  /** Is there an address field? */\n  @State() hasAddress: boolean;\n\n  /** Is there a tax id field? */\n  @State() hasTaxIDField: boolean;\n\n  /** Is there a bumps field? */\n  @State() hasBumpsField: boolean;\n\n  /** Is there a tax line? */\n  @State() hasTaxLine: boolean;\n\n  /** Is there a bump line? */\n  @State() hasBumpLine: boolean;\n\n  @Watch('order')\n  handleOrderChange() {\n    // bail if we don't have address invalid error or disabled.\n    if (this.disabled) return;\n    // make sure to add the address field if it's not there.\n    if (this?.order?.tax_status === 'address_invalid' || this?.order?.shipping_enabled) {\n      this.addAddressField();\n    }\n    // add order bumps.\n    if (this?.order?.recommended_bumps?.data?.length) {\n      this.addBumps();\n    }\n    if (!!this.order?.tax_amount) {\n      this.addTaxLine();\n    }\n  }\n\n  componentWillLoad() {\n    this.hasAddress = !!this.el.querySelector('sc-order-shipping-address');\n    this.hasTaxIDField = !!this.el.querySelector('sc-order-tax-id-input');\n    this.hasBumpsField = !!this.el.querySelector('sc-order-bumps');\n    this.hasTaxLine = !!this.el.querySelector('sc-line-item-tax');\n\n    // automatically add address field if tax is enabled.\n    if (this.taxProtocol?.tax_enabled) {\n      this.addAddressField();\n\n      // if eu vat is required, add the tax id field.\n      if (this.taxProtocol?.eu_vat_required) {\n        this.addTaxIDField();\n      }\n    }\n\n    // make sure to check order on load.\n    this.handleOrderChange();\n  }\n\n  addAddressField() {\n    if (this.hasAddress) return;\n    const payment = this.el.querySelector('sc-payment');\n    const address = document.createElement('sc-order-shipping-address');\n    address.label = __('Address', 'surecart');\n    payment.parentNode.insertBefore(address, payment);\n    this.hasAddress = true;\n  }\n\n  addTaxIDField() {\n    if (this.hasTaxIDField) return;\n    const payment = this.el.querySelector('sc-payment');\n    const taxInput = document.createElement('sc-order-tax-id-input');\n    taxInput.taxIdentifier?.number_type === 'eu_vat';\n    payment.parentNode.insertBefore(taxInput, payment);\n    this.hasTaxIDField = true;\n  }\n\n  addBumps() {\n    if (this.hasBumpsField) return;\n    const payment = this.el.querySelector('sc-payment');\n    const bumps = document.createElement('sc-order-bumps');\n    bumps.bumps === this.order?.recommended_bumps?.data;\n    payment.parentNode.insertBefore(bumps, payment.nextSibling);\n    this.hasBumpsField = true;\n  }\n\n  addTaxLine() {\n    if (this.hasTaxLine) return;\n    const total = this.el.querySelector('sc-line-item-total[total=total]');\n    const tax = document.createElement('sc-line-item-tax');\n    if (total?.previousElementSibling?.tagName === 'SC-DIVIDER') {\n      total.parentNode.insertBefore(tax, total.previousElementSibling);\n    } else {\n      total.parentNode.insertBefore(tax, total);\n    }\n    this.hasTaxLine = true;\n  }\n\n  render() {\n    return <slot />;\n  }\n}\n"],"version":3}